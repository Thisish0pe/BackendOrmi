{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# colab 사용법"
      ],
      "metadata": {
        "id": "x__-0LQ_uq4L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* MAC을 사용하는 경우 Ctrl 대신 Command입니다. Alt 대신 Option입니다.\n",
        "1. **실행 단축키**\n",
        "    1. (필수) `Ctrl(Command)` + `Enter` : 해당 셀 실행\n",
        "    2. `Shift` + `Enter` : 해당 셀 실행 + 커서를 다음 셀로 이동\n",
        "    3. (필수) `Alt(Option)` + `Enter` : 해당 셀 실행 + 코드 불록 하단 추가\n",
        "2. **셀 삽입/삭제 관련 단축키**\n",
        "    1. `Ctrl(Command)` + M A : 코드 셀 위에 삽입\n",
        "    2. `Ctrl(Command)` + M B : 코드 셀 아래 삽입\n",
        "    3. `Ctrl(Command)` + M D : 셀 지우기\n",
        "    4. `Ctrl(Command)` + M Y : 코드 셀로 변경\n",
        "    5. `Ctrl(Command)` + M M : 마크다운 셀로 변경\n",
        "    6. `Ctrl(Command)` + M Z : 실행 취소\n",
        "3. 수정 관련된 단축키\n",
        "    1. `Ctrl(Command)` + `Alt(Option)` + 화살표위아래 : 동시 수정\n",
        "    2. (자주) `Ctrl(Command)` + D : 같은 단어 찾아 동시 수정\n",
        "    3. `Ctrl(Command)` + `Shift` + L : 동일 단어를 전체로 찾아 동시 수정\n",
        "    4. `Alt(Option)` + `Shift` + 화살표위아래 : 해당내용을 위나 아래 복사해서 붙여넣기\n",
        "    5. `Alt(Option)` + 화살표위아래 : 해당 내용을 위나 아래로 보내기\n",
        "    6. (자주) `Ctrl(Command)` + `Alt(Option)` + 화살표위아래 : 위아래 동시 수정\n",
        "    7. (자주) Home, End : 문장의 양 끝\n",
        "    8. (필수) `Ctrl` + `/` : 주석\n",
        "    9. (필수) `Shift` + `Del` : 한 줄 지우기\n",
        "    10. (필수) `Tab`, `Ctrl` + `]` : 들여쓰기\n",
        "    11. (필수) `Shift` + `Tab`, `Ctrl` + `[` : 내어쓰기\n",
        "4. 단축키 보기 및 설정\n",
        "    1. `Ctrl(Command)` + M H : 단축키 모음"
      ],
      "metadata": {
        "id": "FTQTXMTtveWG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 마크다운"
      ],
      "metadata": {
        "id": "qkYzsmBLx6XL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 필수 마크다운\n",
        "\n",
        "    ```\n",
        "    # hello\n",
        "    ## hello\n",
        "    ### hello\n",
        "\n",
        "    1. hello\n",
        "    2. hello\n",
        "    3. hello\n",
        "\n",
        "    * hello\n",
        "    * hello\n",
        "    * hello\n",
        "    ```\n",
        "\n",
        "* 선택 마크다운(필수가 아니니 부담가지지 마세요.)\n",
        "\n",
        "    ```\n",
        "    # h1\n",
        "    ## h2\n",
        "    ### h3\n",
        "    #### h4\n",
        "    ##### h5\n",
        "    ###### h6\n",
        "\n",
        "    ---\n",
        "\n",
        "    1. hello\n",
        "    2. hello\n",
        "    3. hello\n",
        "\n",
        "    * hello\n",
        "    * hello\n",
        "    * hello\n",
        "\n",
        "    - hello\n",
        "    - hello\n",
        "    - hello\n",
        "\n",
        "    __굵게__\n",
        "    **굵게**\n",
        "    _기울여 쓰기_\n",
        "    *기울여 쓰기*\n",
        "    ~취소선~\n",
        "    ~~취소선~~\n",
        "\n",
        "    > 인용문 작성하기\n",
        "    `인라인 코드는 이렇게 작성해요.`\n",
        "\n",
        "    [인라인 링크](https://velog.io/)\n",
        "\n",
        "    ![이미지 설명](이미지 링크)\n",
        "    \n",
        "    * table은 직접 만들지 마시고 https://www.tablesgenerator.com/markdown_tables 와 같은 서비스를 이용하세요.\n",
        "    \n",
        "    | 1 | 2     | 3 | 4 | 5     |\n",
        "    |---|-------|---|---|-------|\n",
        "    | 1 | hello | 3 | 4 | world |\n",
        "\n",
        "    * [ ] hello\n",
        "    * [X] hello\n",
        "    ```\n"
      ],
      "metadata": {
        "id": "CJgTFSb0yDS0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Python"
      ],
      "metadata": {
        "id": "tzaJO6Oh4BA1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#행 단위 주석입니다.\n",
        "\n",
        "\"\"\"\n",
        "큰 따옴표로 세번 묶거나\n",
        "작은따옴표로 세번 묶으면\n",
        "열단위 주석이 됩니다.\n",
        "\"\"\"\n",
        "\n",
        "'''\n",
        "큰 따옴표로 세번 묶거나\n",
        "작은따옴표로 세번 묶으면\n",
        "열단위 주석이 됩니다.\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "EiWJQm-Xx0WC",
        "outputId": "e6ef8ce7-700b-490f-f6f2-c69114322198"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\n큰 따옴표로 세번 묶거나\\n작은따옴표로 세번 묶으면\\n열단위 주석이 됩니다.\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 아래와 같이 열단위 주석으로 text를 넣을 수도 있습니다.\n",
        "data = '''\n",
        "큰 따옴표로 세번 묶거나\n",
        "작은따옴표로 세번 묶으면\n",
        "열단위 주석이 됩니다.\n",
        "'''\n",
        "\n",
        "data"
      ],
      "metadata": {
        "id": "O5CvQs-w5oT2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Code convention python\n",
        "* https://google.github.io/styleguide/\n",
        "* https://google.github.io/styleguide/pyguide.html"
      ],
      "metadata": {
        "id": "cdB7jRxV47IK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def connect_to_next_port(self, minimum: int) -> int:\n",
        "    \"\"\"Connects to the next available port.\n",
        "\n",
        "    Args:\n",
        "      minimum: A port value greater or equal to 1024.\n",
        "\n",
        "    Returns:\n",
        "      The new minimum port.\n",
        "\n",
        "    Raises:\n",
        "      ConnectionError: If no available port is found.\n",
        "    \"\"\"\n",
        "    if minimum < 1024:\n",
        "        # Note that this raising of ValueError is not mentioned in the doc\n",
        "        # string's \"Raises:\" section because it is not appropriate to\n",
        "        # guarantee this specific behavioral reaction to API misuse.\n",
        "        raise ValueError(f'Min. port must be at least 1024, not {minimum}.')\n",
        "    port = self._find_next_open_port(minimum)\n",
        "    if port is None:\n",
        "        raise ConnectionError(\n",
        "            f'Could not connect to service on port {minimum} or higher.')\n",
        "    assert port >= minimum, (\n",
        "        f'Unexpected port {port} when minimum was {minimum}.')\n",
        "    return port"
      ],
      "metadata": {
        "id": "6Sw9kDCJ5tWh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "connect_to_next_port"
      ],
      "metadata": {
        "id": "gDGpIxHE55hG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 띄어쓰기 4칸 (tab(스페이스 4칸과 다릅니다!), 6칸, 7칸 다 작동합니다.)"
      ],
      "metadata": {
        "id": "y6wQmaW46WJp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 아래와 같이 탭과 띄어쓰기 4번을 혼용하시면 error가 납니다.\n",
        "for i in range(10):\n",
        "    print(i)\n",
        "\tprint('큰 따옴표로 세번 묶거나')"
      ],
      "metadata": {
        "id": "ejRqHMOO7G37"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10     #int, 정수형\n",
        "b = 10.1   #float, 실수\n",
        "c = -1\n",
        "d = True   #bool, 논리형(부울형, 참거짓형)\n",
        "e = 'good'\n",
        "f = '10'   #str, 문자열\n",
        "g = 'kim'\n",
        "h = 'honggildong'\n",
        "i = 'example'\n",
        "j = 10 + 2j #complex, 복소수\n",
        "k = 0b110   #int, 2진법 \n",
        "l = 0o56    #int, 8진법\n",
        "m = 0xAC    #int, 16진법\n",
        "\n",
        "##########\n",
        "def hello(x):\n",
        "    return x**2\n",
        "\n",
        "class A: # 자동차 공장\n",
        "    pass\n",
        "\n",
        "n = hello # function\n",
        "o = print # bulit-in function (https://docs.python.org/3/library/functions.html)\n",
        "p = lambda x:x**2 # function\n",
        "q = int # type\n",
        "r = A # class\n",
        "s = A() # instance # 자동차\n",
        "##########\n",
        "\n",
        "print(f'type(10) : {type(a)}')\n",
        "print(f'type(10.1) : {type(b)}')\n",
        "print(f'type(-1) : {type(c)}')\n",
        "print(f'type(True) : {type(d)}')\n",
        "print(f'type(\\'good\\') : {type(e)}')\n",
        "print(f'type(\\'good\\'.upper) : {type(e.upper)}')\n",
        "print(f'\\'10\\' + \\'10\\' : {f + f}')\n",
        "print(f'\\'10\\' * 3 : {f * 3}')\n",
        "print(f'\\'hong\\' + \\'gildong\\' : {g + h}')\n",
        "print(f'type(\\'gildong\\') : {type(h)}')\n",
        "print(f'type(\\'gildong100!!\\') : {type(i)}')\n",
        "print(f'type(10 + 2j) : {type(j)}')\n",
        "print(f'type(0b110) : {type(k)}')\n",
        "print(k)\n",
        "print(f'type(0o56) : {type(i)}')\n",
        "print(i)\n",
        "print(f'type(0xAC) : {type(m)}')\n",
        "print(m)\n",
        "print(f'type(def func():...생략...) : {type(n)}')\n",
        "print(f'type(print) : {type(o)}')\n",
        "print(f'type(lambda x:x**2) : {type(p)}')\n",
        "print(f'type(int) : {type(int)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bmrKWvcv7uSH",
        "outputId": "29b0035b-8e87-47ce-895d-7cdf239b8ebe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "type(10) : <class 'int'>\n",
            "type(10.1) : <class 'float'>\n",
            "type(-1) : <class 'int'>\n",
            "type(True) : <class 'bool'>\n",
            "type('good') : <class 'str'>\n",
            "type('good'.upper) : <class 'builtin_function_or_method'>\n",
            "'10' + '10' : 1010\n",
            "'10' * 3 : 101010\n",
            "'hong' + 'gildong' : kimhonggildong\n",
            "type('gildong') : <class 'str'>\n",
            "type('gildong100!!') : <class 'str'>\n",
            "type(10 + 2j) : <class 'complex'>\n",
            "type(0b110) : <class 'int'>\n",
            "6\n",
            "type(0o56) : <class 'str'>\n",
            "example\n",
            "type(0xAC) : <class 'int'>\n",
            "172\n",
            "type(def func():...생략...) : <class 'function'>\n",
            "type(print) : <class 'builtin_function_or_method'>\n",
            "type(lambda x:x**2) : <class 'function'>\n",
            "type(int) : <class 'type'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 이스케이프 문자\n",
        "# https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EB%AC%B8%EC%9E%90\n",
        "print('hello \\n world')\n",
        "print('hello \\t world')\n",
        "print('hello \\' world')\n",
        "print('hello \\\" world')\n",
        "print('hello \\\\ world')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8OqkyWik-Nwb",
        "outputId": "91c3a6ea-894b-4b92-8c76-afbc4114c971"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello \n",
            " world\n",
            "hello \t world\n",
            "hello ' world\n",
            "hello \" world\n",
            "hello \\ world\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# type -> string\n",
        "\n",
        "hello = 10\n",
        "\n",
        "print(r'hello \\n world') # str -> raw (Django 2.x까지 url parsing을 이렇게 사용하고 있어요.)\n",
        "print(f'hello \\n world {hello}') # 앞으로 f-string 기법\n",
        "print('hello world {}'.format(hello))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FSpV2jdX_th6",
        "outputId": "e875e038-b0a0-4170-c26a-e5ae6afdbc77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello \\n world\n",
            "hello \n",
            " world 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# type -> float\n",
        "# 오일러의 수를 모른다 해서, 수학 연산이 약하다 해서 우리 수업에 문제가 되지 않습니다.\n",
        "print(2.3e3) # 무리수, 오일러 수(2.718에 수렴, 파이가 3.14인 것처럼)\n",
        "print(2.3E3)\n",
        "\n",
        "2.3 * (10 ** 3)"
      ],
      "metadata": {
        "id": "oRp5o0jSEYkw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(2.3e-3) # 무리수, 오일러 수(2.718에 수렴, 파이가 3.14인 것처럼)\n",
        "print(2.3E-3)\n",
        "\n",
        "2.3 * (10 ** -3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HElnmgCOE0m-",
        "outputId": "b4353306-5c76-40bf-e591-0ecd75983206"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0023\n",
            "0.0023\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0023"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(2.3E-3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Og0AzspPFKvy",
        "outputId": "518a2cf7-cd86-499d-b034-bf4fd5d39970"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "float"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class A: # 자동차 공장\n",
        "    pass\n",
        "\n",
        "a = A # class\n",
        "b = A() # instance # 자동차\n",
        "\n",
        "print(type(a))\n",
        "print(type(b))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bA78yQ61-y9g",
        "outputId": "3a6efd70-5492-45e7-c5aa-d6473cdf9fec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'type'>\n",
            "<class '__main__.A'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 변수를 처음 만나시면 type, dir을 해봅니다.\n",
        "# type을 찍으면 검색 키워드를 알 수 있습니다.\n",
        "# dir을 찍으면 속성을 알 수 있습니다.\n",
        "type(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QogcxZW88l2U",
        "outputId": "b0334b10-3504-4f6a-fe1c-8365554fdf1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "int"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TPuT1-C68o0H",
        "outputId": "32c86783-5f3f-4d49-db2e-b6c5fe624e45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dir(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "auPIyvXH8zUJ",
        "outputId": "9e0cd487-7673-40bd-a521-ce904432b757"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__abs__',\n",
              " '__add__',\n",
              " '__and__',\n",
              " '__bool__',\n",
              " '__ceil__',\n",
              " '__class__',\n",
              " '__delattr__',\n",
              " '__dir__',\n",
              " '__divmod__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__float__',\n",
              " '__floor__',\n",
              " '__floordiv__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getnewargs__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__index__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__int__',\n",
              " '__invert__',\n",
              " '__le__',\n",
              " '__lshift__',\n",
              " '__lt__',\n",
              " '__mod__',\n",
              " '__mul__',\n",
              " '__ne__',\n",
              " '__neg__',\n",
              " '__new__',\n",
              " '__or__',\n",
              " '__pos__',\n",
              " '__pow__',\n",
              " '__radd__',\n",
              " '__rand__',\n",
              " '__rdivmod__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__rfloordiv__',\n",
              " '__rlshift__',\n",
              " '__rmod__',\n",
              " '__rmul__',\n",
              " '__ror__',\n",
              " '__round__',\n",
              " '__rpow__',\n",
              " '__rrshift__',\n",
              " '__rshift__',\n",
              " '__rsub__',\n",
              " '__rtruediv__',\n",
              " '__rxor__',\n",
              " '__setattr__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__sub__',\n",
              " '__subclasshook__',\n",
              " '__truediv__',\n",
              " '__trunc__',\n",
              " '__xor__',\n",
              " 'as_integer_ratio',\n",
              " 'bit_count',\n",
              " 'bit_length',\n",
              " 'conjugate',\n",
              " 'denominator',\n",
              " 'from_bytes',\n",
              " 'imag',\n",
              " 'numerator',\n",
              " 'real',\n",
              " 'to_bytes']"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 실무에서 자주 사용하는 구문\n",
        "type(10)\n",
        "type(10) == int\n",
        "type(10.1) == float"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v1qKTnVAFVAe",
        "outputId": "2dc6c5e0-347a-44f7-af68-80b653d61d12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 위만큼 자주사용하진 않지만 타입 확인 코드\n",
        "a = 10\n",
        "isinstance(a, int)\n",
        "isinstance(a, float)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ow6Nj-nsFj8R",
        "outputId": "6c2a9e83-aa7e-46c8-eb57-88040c670ff0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 변수"
      ],
      "metadata": {
        "id": "tx-EhIcCF2Kj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# CS 변수는 포스트잇\n",
        "# 변수는 메모리 공간을 가리킵니다.\n",
        "\n",
        "# x라는 포스트잇도 붙였지만\n",
        "# y라는 포스트잇도 붙여져 있는 것입니다.\n",
        "x = 10\n",
        "y = 10\n",
        "\n",
        "id(x), id(y) # id는 누굴 가리키고 있는지 그 주소값을 반환합니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IEzjf91BF8dw",
        "outputId": "b4464b82-ac92-4e4c-d65c-b0f1e2a98d60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(139737727205904, 139737727205904)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x is y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zGzifr5zHL3I",
        "outputId": "6c00dbef-972c-402f-9c9a-e1d35e640947"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 257\n",
        "y = 257\n",
        "\n",
        "id(x), id(y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kp-DcQw-HOZd",
        "outputId": "a5a8d154-3a30-4807-9db1-f2f2c232e625"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(139736413794128, 139736413797264)"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x is y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HMQhFLC4Hh3N",
        "outputId": "c2657f93-02ad-410b-edfb-b919b071eaa3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Python은 자체적으로 속도를 높이기 위한 \n",
        "# 여러가지 노력들을 해왔습니다.\n",
        "# (아래 언급한 것 말고도 각각의 자료형에서 메모리를 효율적으로 관리하기 위한 노력들을 말씀드리겠습니다.)\n",
        "# 구버전도 말씀을 드릴 것인데 이유는 여러분이 실무에가서 접할 환경이 최신 버전이 아니기 때문입니다.\n",
        "# 야xx의 경우에는 Django 1.x, python 2.x를 사용하고 있어요. \n",
        "# 대부분의 기업들이 한 번 구축해놓은 시스템은 바꾸기가 쉽지 않습니다.\n",
        "\n",
        "# 그래서 -5 ~ 256은 먼저 메모리에 적재를 합니다."
      ],
      "metadata": {
        "id": "D8S8eDgnHj47"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = -5\n",
        "y = -5\n",
        "\n",
        "id(x), id(y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DIfulHSCILSa",
        "outputId": "157ae4b1-1d59-43e5-9583-1ea346ab7b93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(139737727205424, 139737727205424)"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 변수의 타입이란 무엇인가?\n",
        "* 변수의 타입은 왜 있는 것일까?\n",
        "* 어떤 고민을 통해 변수의 속성을 정했을까?"
      ],
      "metadata": {
        "id": "wk41BPqXIsy0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'a' + 'a'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "szLg5kCPIjQR",
        "outputId": "43d9b7ce-fdae-4379-e1be-49663c5b3f12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'aa'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 왜 이어 붙였지?\n",
        "# 컴퓨터 입장에서 a는 97(인간이 보는 숫자) -> 0x61! 결국 숫자!"
      ],
      "metadata": {
        "id": "s-8AHdjsI-5S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# cpython -> 이어 붙이라고 정의가 되어 있어서\n",
        "# 사회 통념적인 약속 -> 코드로 구현\n",
        "# type, dir\n",
        "# 이러한 약속들은 메직메서드(__init__.....)를 통해 구현하게 됩니다."
      ],
      "metadata": {
        "id": "Rah9zwE5JRyu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 변수의 속성 변경"
      ],
      "metadata": {
        "id": "1wNSxRe8J5rH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'10' + '10'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "nvl29tysKEb9",
        "outputId": "3de4d5e4-3eaa-4170-d62f-46bac62d05eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'1010'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "int('10') + int('10')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b0ZDkGHoJ7rU",
        "outputId": "aea0eae0-4276-4eec-a718-fb9ca37a77f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 지금 배우는 포인트는 class가 중요한 문법이 아니라\n",
        "# 이러한 '약속'을 우리가 변경할 수 있다가 중요한 포인트입니다.\n",
        "class int(int):\n",
        "    def __add__(self, a):\n",
        "        return 'leehojun'\n",
        "\n",
        "int('10') + int('10')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "EnqZ3qw-KLxp",
        "outputId": "70a43a10-f64f-4a83-e18c-04a01f25dae7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'leehojun'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class int(int):\n",
        "    def __add__(self, a):\n",
        "        return self * a\n",
        "\n",
        "int('10') + int('10')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YATr2VdoKryj",
        "outputId": "718f7673-b14d-45f4-d80e-2749eb291102"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "100"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dir(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rJjZ79C8K4BU",
        "outputId": "eb094449-a80f-47d4-facd-958e52394714"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__abs__',\n",
              " '__add__',\n",
              " '__and__',\n",
              " '__bool__',\n",
              " '__ceil__',\n",
              " '__class__',\n",
              " '__delattr__',\n",
              " '__dir__',\n",
              " '__divmod__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__float__',\n",
              " '__floor__',\n",
              " '__floordiv__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getnewargs__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__index__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__int__',\n",
              " '__invert__',\n",
              " '__le__',\n",
              " '__lshift__',\n",
              " '__lt__',\n",
              " '__mod__',\n",
              " '__mul__',\n",
              " '__ne__',\n",
              " '__neg__',\n",
              " '__new__',\n",
              " '__or__',\n",
              " '__pos__',\n",
              " '__pow__',\n",
              " '__radd__',\n",
              " '__rand__',\n",
              " '__rdivmod__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__rfloordiv__',\n",
              " '__rlshift__',\n",
              " '__rmod__',\n",
              " '__rmul__',\n",
              " '__ror__',\n",
              " '__round__',\n",
              " '__rpow__',\n",
              " '__rrshift__',\n",
              " '__rshift__',\n",
              " '__rsub__',\n",
              " '__rtruediv__',\n",
              " '__rxor__',\n",
              " '__setattr__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__sub__',\n",
              " '__subclasshook__',\n",
              " '__truediv__',\n",
              " '__trunc__',\n",
              " '__xor__',\n",
              " 'as_integer_ratio',\n",
              " 'bit_count',\n",
              " 'bit_length',\n",
              " 'conjugate',\n",
              " 'denominator',\n",
              " 'from_bytes',\n",
              " 'imag',\n",
              " 'numerator',\n",
              " 'real',\n",
              " 'to_bytes']"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class int(int):\n",
        "    def 제곱(self, 승수):\n",
        "        return self ** 승수\n",
        "\n",
        "value = int('10')\n",
        "print(dir(value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nznBq77dLcT3",
        "outputId": "2aab8030-ac5e-4b5c-e817-0cb977ad2db6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dict__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio', 'bit_count', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes', '제곱']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "value.제곱(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kYsLYq9gLrPX",
        "outputId": "d9ddf270-f241-453d-9623-35ed00a140ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1000"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 10\n",
        "y = x\n",
        "z = y\n",
        "\n",
        "print(id(x), id(y), id(z))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xVjI6ThsMB9u",
        "outputId": "55cbeeaf-06a7-4dd1-e995-884ad648f16f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "139737727205904 139737727205904 139737727205904\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 10\n",
        "y = x\n",
        "x = 100\n",
        "\n",
        "print(x, y)\n",
        "print(id(x), id(y), id(z))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GJKDS68IMmzo",
        "outputId": "a0216648-6f4a-47d4-a57f-aacecc995490"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100 10\n",
            "139737727208784 139737727205904 139737727205904\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 변수의 속성"
      ],
      "metadata": {
        "id": "FFjeof0zNY0T"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 변수는 주로 스네이크 표기법을 많이 사용합니다. 물론 회사 컨벤션에 따르셔야 합니다.\n",
        "* 영문과 숫자를 사용할 수 있지만, 숫자로  시작하지는 못합니다.\n",
        "* 특수문자는 사용하지 않아요.(언더바(_)는  사용합니다. 스네이크 표기법, 특수문자나  이미중 사용 가능한 것들이 있기는 합니다.  권하지 않습니다.)\n",
        "* 예약어는 사용하지 않습니다.(if, elif, while, * for, etc)\n",
        "* 대소문자는 구분합니다.\n",
        "* 언더바로만 사용하거나 언더바로 시작할 수 있습니다.\n",
        "* 대문자로 시작하는 변수를 사용할 수 있지만, 관습적으로 대문자로 시작하는 변수는 Class로 만들기 때문에 소문자로 시작하는 변수를 만들기를 권합니다. Class는 보통 파스칼 표기법을 따릅니다. 다만 회사 컨벤션마다 다릅니다."
      ],
      "metadata": {
        "id": "sTV5prN9Nabn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 스네이크 표기법(Python에서 주로)\n",
        "hello_world = 10\n",
        "# 카멜 표기법(JavaScript에서 주로)\n",
        "helloWorldHello = 10\n",
        "# 파스칼 표기법(Class 같은 곳에서 많이 사용합니다.)\n",
        "Hello = 10"
      ],
      "metadata": {
        "id": "-tbrSTZZNtUC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 10hello = 100\n",
        "hello10 = 10\n",
        "\n",
        "π = 3.14 # 권하지 않습니다.\n",
        "print(π)\n",
        "\n",
        "_ = 100 # 언더바는 자주사용되는데 이렇게 사용되진 않습니다.\n",
        "print(_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xKCR8vbLhKiz",
        "outputId": "af958672-d495-4401-c9d9-21942d46db56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.14\n",
            "100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for _ in range(10): # 언더바를 순회 안에서 변수로 사용하지 않을때\n",
        "    print('hello')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B1o_bhW8h8N2",
        "outputId": "2c24e4ea-3c35-44fa-bd2b-4d6aa91b93de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello\n",
            "hello\n",
            "hello\n",
            "hello\n",
            "hello\n",
            "hello\n",
            "hello\n",
            "hello\n",
            "hello\n",
            "hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# if = 100\n",
        "# print = 100"
      ],
      "metadata": {
        "id": "Be5nklCtioHp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# print('hello')"
      ],
      "metadata": {
        "id": "TdPmwWwEivQr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(a)"
      ],
      "metadata": {
        "id": "epuTd_98ipkE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 입력과 출력"
      ],
      "metadata": {
        "id": "C9gIfLKxjgPC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = input()\n",
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "OS4t2iv8jmkP",
        "outputId": "5337c5e7-4bd6-4c36-f543-9cafaffdb628"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "10\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'10'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x + x # 사용자에게 받은 입력은 str"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "pyfzi-a0jqcJ",
        "outputId": "01acbb47-73d0-4267-fb46-e9fe1a929152"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'1010'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(10, 10, 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZNu_lO_Oj5rb",
        "outputId": "b8847449-a26e-48f2-a79d-bc0a45e932e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 10 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('hello', 'world', 'hello')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kcLLhU-6j_Kt",
        "outputId": "03e22899-74b2-4d2c-f76b-67c7311d8483"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello world hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(x, x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OcIAAy_mkCV6",
        "outputId": "0dd6f508-1c1f-4562-fd13-e4dee4443ed2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('hello world', end='!')\n",
        "print('hello world', end='!')\n",
        "print('hello world', end='!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1bNLt-0Qkpcc",
        "outputId": "b80b9d3b-0a4b-4585-cb5a-e27981197cac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello world!hello world!hello world!"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('hello', 'world', sep='!')\n",
        "print('010', '5044', '2903', sep='-')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8CEEGCjSk8d_",
        "outputId": "119e3ac4-e2cb-4fb4-842d-e3c2d2c8c7b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello!world\n",
            "010-5044-2903\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "이름 = '이호준'\n",
        "나이 = 10\n",
        "\n",
        "print('1. 제 이름은 이호준입니다. 제 나이는 10입니다.')\n",
        "print('2. 제 이름은 ', 이름, '입니다. 제 나이는 ', 나이, '입니다.', sep='')\n",
        "print('3. 제 이름은 %s입니다. 제 나이는 %d입니다.'%(이름, 나이))\n",
        "print('4. 제 이름은 {}입니다. 제 나이는 {}입니다.'.format(이름, 나이))\n",
        "print(f'4. 제 이름은 {이름}입니다. 제 나이는 {나이}입니다.')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_0vtWPkrlX6l",
        "outputId": "8ce8d5dc-578c-4e47-b68f-18612da486dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1. 제 이름은 이호준입니다. 제 나이는 10입니다.\n",
            "2. 제 이름은 이호준입니다. 제 나이는 10입니다.\n",
            "3. 제 이름은 이호준입니다. 제 나이는 10입니다.\n",
            "4. 제 이름은 이호준입니다. 제 나이는 10입니다.\n",
            "4. 제 이름은 이호준입니다. 제 나이는 10입니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[포멧코드](https://www.notion.so/paullabworkspace/9fd33417740f4eba8715f5c4a1ed7c7b?v=e01ecdfe2f9448dcaad68b03a38057a5)"
      ],
      "metadata": {
        "id": "PfuMr8ngmSFp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## formatting"
      ],
      "metadata": {
        "id": "XR_vDYS-m4Tz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'{100 * 10}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "omTW7TVTm-fX",
        "outputId": "6b21c3da-3f2c-490f-ba2c-421a3fb6123f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 중괄호 안에서 복잡한 연산을 하시는 것을 권하지 않습니다.\n",
        "result = 100 * 10\n",
        "print(f'{result}')"
      ],
      "metadata": {
        "id": "bJDOI64PnF99"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 이런 문법은 필요에 의해 검색해 보시다 보면 익숙해집니다.\n",
        "print(f'{\"hello\":<10}')\n",
        "print(f'{\"hello\":>10}')\n",
        "print(f'{\"hello\":^10}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8kv6uEcwnYkX",
        "outputId": "2ebe3d5f-d194-470a-de71-13713eb1a70a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello     \n",
            "     hello\n",
            "  hello   \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "txt = 'hello'\n",
        "i = 10\n",
        "print(f'{txt:>10}')\n",
        "print(f'{txt:>{i}}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hLkrUPx2ny0Y",
        "outputId": "ea68f2f7-a61a-4a36-b4a9-93235d274ffe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     hello\n",
            "     hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 이런 문법은 필요에 의해 검색해 보시다 보면 익숙해집니다.\n",
        "print(f'{\"hello\":!<10}')\n",
        "print(f'{\"hello\":!>10}')\n",
        "print(f'{\"hello\":!^10}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n62hbKeNoTVV",
        "outputId": "c6ed5559-240d-4247-f0bc-60efe903e6d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello!!!!!\n",
            "!!!!!hello\n",
            "!!hello!!!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 이런 문법은 필요에 의해 검색해 보시다 보면 익숙해집니다.\n",
        "print(f'{\"hello\":=<10}')\n",
        "print(f'{\"hello\":=>10}')\n",
        "print(f'{\"hello\":=^10}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "axrE4QpioXxM",
        "outputId": "227971e9-0872-41fb-aa7e-a0d93a7d4c3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello=====\n",
            "=====hello\n",
            "==hello===\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 둘 다 잊으셔도 됩니다.\n",
        "# 어디에 활용되는지 궁금하다 하신 분이 있으셔서 해드린 것입니다.\n",
        "# https://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/\n",
        "bin(9)\n",
        "print(f'{bin(9)[2:]:0>5}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5TNQyBt_ojF8",
        "outputId": "2bb8e28c-aff0-49b4-dcc3-5029ae51627b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "01001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bin(9 | 30)[2:].replace('1', '#').replace('0', ' ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "fyIvpBy9ut_f",
        "outputId": "e249fb79-cb1e-4806-edff-ced6e3867c14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'#####'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 요정도 활용을 합니다.\n",
        "print(f'{\"start\":-^20}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T7rYR1VBvC7G",
        "outputId": "8e826cdb-7b28-4d7e-e3d7-6b7e0ac207f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------start--------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'{0.12345:0.2f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K3L31a-cvdwN",
        "outputId": "efd9b7b2-0d27-4b74-ee0a-5190f6f5f9f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 이 아래 코드는 필수는 아닙니다. 참고삼아서만 넣어드립니다."
      ],
      "metadata": {
        "id": "uyzkMXZav0so"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 이전 방식\n",
        "print('나의 이름은 %s입니다'%('한사람'))\n",
        "print('나의 이름은 \"%s\"입니다. 나이는 %d세이고 성별은 %s입니다.'%('한사람',33,'남성'))\n",
        "print('나이는 %d세이고 성별은 %s입니다. 나의 이름은 %s입니다. '%(33,'남성','한사람'))\n",
        "print('나이는 %03d세이고 신장은 %6.2f입니다. 나의 이름은 %s입니다. '%(33,56.789,'한사람'))\n",
        "print('-' * 40)\n",
        "\n",
        "# 파이썬(Python) 3 포맷팅 방식\n",
        "print('나의 이름은 {}입니다'.format('한사람'))\n",
        "print('나의 이름은 {0}입니다. 나이는 {1}세이고 성별은 {2}입니다.'.format('한사람',33,'남성'))\n",
        "print('나이는 {1}세이고 성별은 {2}입니다. 나의 이름은 {0}입니다. '.format('한사람',33,'남성'))\n",
        "print('나이는 {age}세이고 성별은 {gender}입니다. 나의 이름은 {name}입니다. '\n",
        "         .format(name='한사람',age=33,gender='남성'))\n",
        "print('만세삼창 :  {0}!!! {0}!!! {0}!!! '.format('만세'))\n",
        "print('삼삼칠 박수 :  {0}!!! {0}!!! {1}!!! '.format('짝'*3,'짝'*7))\n",
        "print('-' * 40)\n",
        "\n",
        "# 파이썬(Python) 3.6 f-string 방식\n",
        "something = '볼펜'\n",
        "EA = 2\n",
        "one_length = 5.343\n",
        "scale = 'cm'\n",
        "\n",
        "print(f'{something} {EA}개의 길이는 {one_length*EA}{scale} 입니다.')\n",
        "print(f'{something} {EA}개의 길이는 {one_length*EA:.1f}{scale} 입니다.')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d1sO91etvpoy",
        "outputId": "e256b758-a0de-4554-946a-bf4a1c3b14bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "나의 이름은 한사람입니다\n",
            "나의 이름은 \"한사람\"입니다. 나이는 33세이고 성별은 남성입니다.\n",
            "나이는 33세이고 성별은 남성입니다. 나의 이름은 한사람입니다. \n",
            "나이는 033세이고 신장은  56.79입니다. 나의 이름은 한사람입니다. \n",
            "----------------------------------------\n",
            "나의 이름은 한사람입니다\n",
            "나의 이름은 한사람입니다. 나이는 33세이고 성별은 남성입니다.\n",
            "나이는 33세이고 성별은 남성입니다. 나의 이름은 한사람입니다. \n",
            "나이는 33세이고 성별은 남성입니다. 나의 이름은 한사람입니다. \n",
            "만세삼창 :  만세!!! 만세!!! 만세!!! \n",
            "삼삼칠 박수 :  짝짝짝!!! 짝짝짝!!! 짝짝짝짝짝짝짝!!! \n",
            "----------------------------------------\n",
            "볼펜 2개의 길이는 10.686cm 입니다.\n",
            "볼펜 2개의 길이는 10.7cm 입니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Python is [{:15}]'.format('good'))\n",
        "print('Python is [{:<15}]'.format('good'))\n",
        "print('Python is [{:>15}]'.format('good'))\n",
        "print('Python is [{:^15}]'.format('good'))\n",
        "print('당신의 나이는 [{:15}]세'.format(22))\n",
        "print('당신의 나이는 [{:<15}]세'.format(22))\n",
        "print('당신의 나이는 [{:>15}]세'.format(22))\n",
        "print('당신의 나이는 [{:<15}]세'.format(22))\n",
        "print('-' * 40)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y-ZNxOJdwRuP",
        "outputId": "fa702544-3e34-46af-9837-9286922b499e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Python is [good           ]\n",
            "Python is [good           ]\n",
            "Python is [           good]\n",
            "Python is [     good      ]\n",
            "당신의 나이는 [             22]세\n",
            "당신의 나이는 [22             ]세\n",
            "당신의 나이는 [             22]세\n",
            "당신의 나이는 [22             ]세\n",
            "----------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "char_a = '5'\n",
        "int_a = 5\n",
        "\n",
        "'''기본적으로 {} 포맷팅의 특성을 그대로 가짐'''\n",
        "print(1234567890)\n",
        "print(f'{char_a:>5}') # >는 오른쪽정렬\n",
        "print(f'{char_a:<5}') # <는 왼쪽정렬\n",
        "print(f'{char_a:^5}') # ^는 가운데정렬\n",
        "print(f'{int_a:0<5}')# <는 왼쪽정렬, 빈자리를 0으로 채울수도 있음\n",
        "print(f'{int_a:^10.2f}') # ^ 가운데 정렬하면서 float 타입지정"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kFC3UtW_wXLj",
        "outputId": "b669398e-3d1d-4905-8a13-e047d4becf4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1234567890\n",
            "    5\n",
            "5    \n",
            "  5  \n",
            "50000\n",
            "   5.00   \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## int (정수)"
      ],
      "metadata": {
        "id": "4FuHS2SOwmjX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 파이썬에서는 숫자를 정수, 실수, 복소수로 나눠 표현합니다.\n",
        "* 2진수, 8진수, 16진수는 정수로 표현됩니다."
      ],
      "metadata": {
        "id": "Ko_gJdPCworV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 1234567899999999999999999999999999999999999999999999999999999\n",
        "print(type(a))\n",
        "# 2.x에서는 int와 long 두 가지가 있었는데 Python3에서는 int만 있습니다! 아무리 큰 수가 담겨도 int!"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MhK97dTUevn4",
        "outputId": "d033c7ef-8a76-4ce0-cce9-7c621c2c1ab4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10**100 # 구골(googol)\n",
        "print(a)\n",
        "print(type(a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OfywK4cngPB1",
        "outputId": "f017b5b9-8509-40db-c1a5-37d6e75d1c5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n",
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "10 # 정수\n",
        "-10 # 정수\n",
        "10.1 # 실수\n",
        "\n",
        "a = 10\n",
        "type(a)\n",
        "dir(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j1lMIQSMwynh",
        "outputId": "d6c12d1f-a670-4391-8dbe-71f59958b537"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__abs__',\n",
              " '__add__',\n",
              " '__and__',\n",
              " '__bool__',\n",
              " '__ceil__',\n",
              " '__class__',\n",
              " '__delattr__',\n",
              " '__dir__',\n",
              " '__divmod__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__float__',\n",
              " '__floor__',\n",
              " '__floordiv__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getnewargs__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__index__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__int__',\n",
              " '__invert__',\n",
              " '__le__',\n",
              " '__lshift__',\n",
              " '__lt__',\n",
              " '__mod__',\n",
              " '__mul__',\n",
              " '__ne__',\n",
              " '__neg__',\n",
              " '__new__',\n",
              " '__or__',\n",
              " '__pos__',\n",
              " '__pow__',\n",
              " '__radd__',\n",
              " '__rand__',\n",
              " '__rdivmod__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__rfloordiv__',\n",
              " '__rlshift__',\n",
              " '__rmod__',\n",
              " '__rmul__',\n",
              " '__ror__',\n",
              " '__round__',\n",
              " '__rpow__',\n",
              " '__rrshift__',\n",
              " '__rshift__',\n",
              " '__rsub__',\n",
              " '__rtruediv__',\n",
              " '__rxor__',\n",
              " '__setattr__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__sub__',\n",
              " '__subclasshook__',\n",
              " '__truediv__',\n",
              " '__trunc__',\n",
              " '__xor__',\n",
              " 'as_integer_ratio',\n",
              " 'bit_count',\n",
              " 'bit_length',\n",
              " 'conjugate',\n",
              " 'denominator',\n",
              " 'from_bytes',\n",
              " 'imag',\n",
              " 'numerator',\n",
              " 'real',\n",
              " 'to_bytes']"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'bit_length' # bit로 바꾸었을 때 비트의 길이\n",
        "'to_bytes' # 컴퓨터에 저장하는 바이트의 형태로 숫자를 표현"
      ],
      "metadata": {
        "id": "I_RKmj4RxBqD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 1Bit, 0 ~ 1 # bit - 1자리\n",
        "# 1Bytes = 8bit, 00000000 ~ 11111111 # 1byte - 8bit\n",
        "# 1KB (키로바이트) = 1024Bytes\n",
        "# 1MB (메가바이트) = 1024KB\n",
        "# 1GB (기가바이트) = 1024MB\n",
        "# 1TB (테라바이트) = 1024GB\n",
        "# 1PB (페타바이트) = 1024TB"
      ],
      "metadata": {
        "id": "5UtZn0RcxvAh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "(9).bit_length() # 1001"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cuc-iV-CzVBJ",
        "outputId": "07676816-b93d-4ca8-b682-5bde0e07dd96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 컴퓨터가 숫자를 어떻게 저장하는가?\n",
        "(2).to_bytes(1, byteorder='little', signed=True)\n",
        "(1).to_bytes(1, byteorder='little', signed=True)\n",
        "(0).to_bytes(1, byteorder='little', signed=True)\n",
        "(-1).to_bytes(1, byteorder='little', signed=True)\n",
        "(-2).to_bytes(1, byteorder='little', signed=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E5m6x8zGzuGt",
        "outputId": "a67de90d-f5e1-4730-ca29-3ebbc6e52967"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "b'\\xfe'"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 컴퓨터는 음수를 자체적으로 표현할 수 없기에 2의 보수를 사용합니다. \n",
        "# 1의 보수를 사용하게 되면 +0과 -0이 존재하게 됨으로 비트 하나를 낭비하게 됩니다. \n",
        "# 따라서 2의 보수를 사용합니다."
      ],
      "metadata": {
        "id": "0YYHT-bB0hMN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 0000 0001 # 1\n",
        "# 1111 1110 # 1의 1의 보수\n",
        "# 1111 1111 # 1의 2의 보수 => ff"
      ],
      "metadata": {
        "id": "qL8ZgRC72Up-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 진법 변환 쉽게 하는 법 : 가장 가까운 승수를 찾아 더하거나 뺍니다.\n",
        "# 10진법\n",
        "# 0 1 2 3 4 5 6 7 8 9 -> 10\n",
        "# 1324 = 1*10^3 + 3*10^2 + 2*10^1 + 4*10^0\n",
        "\n",
        "# 2진법\n",
        "# 0 1 -> 10\n",
        "# 1001 = 1*2^3 + 1*2^0 = 9\n",
        "\n",
        "# 8진법\n",
        "# 0 1 2 3 4 5 6 7 -> 10\n",
        "\n",
        "# 16진법\n",
        "# 0 1 2 3 4 5 6 7 8 9 a b c d e f -> 10"
      ],
      "metadata": {
        "id": "pie3v6Ov2uS-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# color의 표현\n",
        "# 2596be\n",
        "# 000000 ~ ffffff\n",
        "# ff는 10진수로 무슨 숫자를 의미\n",
        "# 100 - 1 => ff가 됩니다. 그래서 256 - 1"
      ],
      "metadata": {
        "id": "hJ-Qs3MZ7muX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "type(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JQ-C9p_r8FWJ",
        "outputId": "a1d66be7-4e58-48a8-db7c-b5104ac3424d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "int"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "int('10') + int('10')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R1c4KnaW8M3F",
        "outputId": "ab98cd94-0b49-4c03-9008-fc091ab4f0c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "int('10', 2) # 2진법으로 10은?"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_UQMFy8K8SbR",
        "outputId": "2dd9f93c-5437-42e4-8dd6-98db58d32d25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "int('10', 8) # 8진법으로 10은?"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rKGPnSv58Z2I",
        "outputId": "2c5b1ef6-ff2e-4640-b68e-4bcdd4709c40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "int('10', 16) # 16진법으로 10은?"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ukJkUEpF8cVh",
        "outputId": "d2637643-d21f-4a7a-ff69-3978c489cf99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(0b110) # 바이너리 - 2진수\n",
        "print(0o110) # 옥타 - 8진수\n",
        "print(0x110) # 헥사 - 16진수"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ioMm-g158f-t",
        "outputId": "31abe74b-7786-4e2c-991f-f04718b50331"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(0b110)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wuiWS5Uo9Fho",
        "outputId": "147ede1c-e202-4e87-97e7-504af24c4269"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "int"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "type(a) == int\n",
        "isinstance(a, int)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oFCaE7CZ89hT",
        "outputId": "a30a372c-c144-4df4-ee82-9957b818f66d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## float (실수)"
      ],
      "metadata": {
        "id": "WHtIN8oG9DTD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10.1\n",
        "\n",
        "type(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "49Yqsf7h9Mr9",
        "outputId": "4dfa6e6e-b144-4cc4-ec76-4e0fb3c5acb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "float"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dir(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IFSd_1Vv9QxQ",
        "outputId": "f157b952-f68f-4afb-a904-b62c3fcecaee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__abs__',\n",
              " '__add__',\n",
              " '__bool__',\n",
              " '__ceil__',\n",
              " '__class__',\n",
              " '__delattr__',\n",
              " '__dir__',\n",
              " '__divmod__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__float__',\n",
              " '__floor__',\n",
              " '__floordiv__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getformat__',\n",
              " '__getnewargs__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__int__',\n",
              " '__le__',\n",
              " '__lt__',\n",
              " '__mod__',\n",
              " '__mul__',\n",
              " '__ne__',\n",
              " '__neg__',\n",
              " '__new__',\n",
              " '__pos__',\n",
              " '__pow__',\n",
              " '__radd__',\n",
              " '__rdivmod__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__rfloordiv__',\n",
              " '__rmod__',\n",
              " '__rmul__',\n",
              " '__round__',\n",
              " '__rpow__',\n",
              " '__rsub__',\n",
              " '__rtruediv__',\n",
              " '__setattr__',\n",
              " '__setformat__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__sub__',\n",
              " '__subclasshook__',\n",
              " '__truediv__',\n",
              " '__trunc__',\n",
              " 'as_integer_ratio',\n",
              " 'conjugate',\n",
              " 'fromhex',\n",
              " 'hex',\n",
              " 'imag',\n",
              " 'is_integer',\n",
              " 'real']"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "b = 10.1\n",
        "\n",
        "a + b # 다른 일부 언어에서는 허용되지 않습니다. "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_xpjzwvH9W0E",
        "outputId": "c750b6b5-b164-4523-bc1e-41cb6fdc585f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20.1"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 부동소수점 오차(2진법으로 변환했을 때 0.1이 무한대수가 발생합니다.)\n",
        "0.1 + 0.2 # 대부분의 언어 공통입니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iPOP5_j09huq",
        "outputId": "8a8c50ce-4f0d-45d2-bb2d-774b8c10515f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.30000000000000004"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 0.1"
      ],
      "metadata": {
        "id": "WRmNCo4R93bc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 20번 반복해보세요.\n",
        "a = a + 0.1\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5qPsROhP95mk",
        "outputId": "f02fcd5b-8a01-4116-81e4-d48fbde3e5bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0999999999999999"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* https://docs.python.org/ko/3/tutorial/floatingpoint.html\n",
        "* https://0.30000000000000004.com/ 에서 언어별 해결책을 제시한다.\n",
        "* 컴퓨터에서 부동소수점 숫자는 2진 분수로 표현되기에 무한대수가 발생한다.\n",
        "* [무한수가 발생되는 원리](https://www.notion.so/paullabworkspace/5f34f21bf9a34015b170e7afd7da9593)"
      ],
      "metadata": {
        "id": "qeW-c4rw-lqE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 오늘 배운 것 정리\n",
        "1. 단축키\n",
        "    * (필수) Ctrl(Command) + Enter : 해당 셀 실행\n",
        "    * (필수) Alt(Option) + Enter : 해당 셀 실행 + 코드 불록 하단 추가\n",
        "    * (필수) Ctrl + / : 주석\n",
        "    * (필수) Shift + Del : 한 줄 지우기\n",
        "    * (필수) Tab, Ctrl + ] : 들여쓰기\n",
        "    * (필수) Shift + Tab, Ctrl + [ : 내어쓰기\n",
        "\n",
        "2. 마크다운\n",
        "    ```\n",
        "    # hello\n",
        "    ## hello\n",
        "    ### hello\n",
        "\n",
        "    1. hello\n",
        "    2. hello\n",
        "    3. hello\n",
        "\n",
        "    * hello\n",
        "    * hello\n",
        "    * hello\n",
        "    ```\n",
        "\n",
        "3. 주석\n",
        "\n",
        "    ```python\n",
        "    #행 단위 주석입니다.\n",
        "\n",
        "    \"\"\"\n",
        "    큰 따옴표로 세번 묶거나\n",
        "    작은따옴표로 세번 묶으면\n",
        "    열단위 주석이 됩니다.\n",
        "    \"\"\"\n",
        "\n",
        "    '''\n",
        "    큰 따옴표로 세번 묶거나\n",
        "    작은따옴표로 세번 묶으면\n",
        "    열단위 주석이 됩니다.\n",
        "    '''\n",
        "    ```\n",
        "\n",
        "4. PEP8 권고사항\n",
        "    * 띄어쓰기는 4칸\n",
        "    * 한 줄에 79자 이상을 사용하지 않는다.\n",
        "\n",
        "5. 형의 종류(type, dir)\n",
        "    * 컨벤션 자료형(list, tuple, dict, set)은 나중에 진행합니다.\n",
        "    * int\n",
        "    * float\n",
        "    * bool\n",
        "    * str\n",
        "    * function\n",
        "    * bulit-in function\n",
        "\n",
        "6. 이스케이프 문자\n",
        "    * https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EB%AC%B8%EC%9E%90\n",
        "    ```python\n",
        "    print('hello \\n world')\n",
        "    print('hello \\t world')\n",
        "    print('hello \\' world')\n",
        "    print('hello \\\" world')\n",
        "    print('hello \\\\ world')\n",
        "    ```\n",
        "\n",
        "7. 실무에서 자주 사용하는 타입확인 구문\n",
        "    ```python\n",
        "    type(10)\n",
        "    type(10) == int\n",
        "    type(10.1) == float\n",
        "\n",
        "    a = 10\n",
        "    isinstance(a, int)\n",
        "    isinstance(a, float)\n",
        "    ```\n",
        "\n",
        "8. 변수의 인사이트\n",
        "    ```\n",
        "    dir을 입력했을 때\n",
        "    1. __hello__와 같은 형태의 메직 메서드는 속성을 표현한다\n",
        "    2.  언더바가 없는 메서드는 해당 자료형의 편의 기능을 제공한다\n",
        "    ```\n",
        "\n",
        "9. 입력과 출력\n",
        "    ```python\n",
        "    x = input() #입력, 숫자를 입력해도 str\n",
        "    print(x) #출력\n",
        "\n",
        "    이름 = '이호준'\n",
        "    나이 = 10\n",
        "    print(f'제 이름은 {이름}입니다. 제 나이는 {나이}입니다.')\n",
        "    print(f'{100 * 10}')\n",
        "    ```\n",
        "\n",
        "\n",
        "10. int 형\n",
        "    * 2진수, 8진수, 16진수는 정수\n",
        "\n",
        "\n",
        "11. float 형\n",
        "    * 부동소수점 오차(2진법으로 변환했을 때 0.1이 무한대수가 발생합니다.)\n",
        "    0.1 + 0.2 # 대부분의 언어 공통입니다.\n",
        "    * https://docs.python.org/ko/3/tutorial/floatingpoint.html\n",
        "    * https://0.30000000000000004.com/ 에서 언어별 해결책을 제시한다."
      ],
      "metadata": {
        "id": "2pnCzgV5DMtw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## str (문자열)"
      ],
      "metadata": {
        "id": "E1nDm4EOyOxg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- 순서가 있는 **시퀀스 자료형**입니다.\n",
        "- 작은 따옴표(' ')나 큰 따옴표(\" \"), 삼중따옴표('''str''', \"\"\"str\"\"\")로 감싸는 것도 가능합니다. (삼중따옴표를 사용할 경우에는 줄단위의 문자열을 나타낼 수 있습니다.)\n",
        "- 작은 따옴표 안에 큰 따옴표, 큰 따옴표 안에 작은 따옴표 사용이 가능합니다.\n",
        "- 이스케이프 문자도 사용이 가능합니다.\n",
        "- 리스트, 튜플도 시퀀스 자료형입니다."
      ],
      "metadata": {
        "id": "oiTbcA4ZymFy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s = 'paullab CEO leehojun'\n",
        "s[0] # 0은 index입니다. 이렇게 호출하는 것을 indexing이라고 합니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "bWpJ4e7Rymxn",
        "outputId": "5f3f9487-5b8b-4f08-c008-fc18674e793a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'p'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b7Qrox7Kzw6l",
        "outputId": "09f4b060-5868-4c81-c093-1717e408796b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dir(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ovEYlXhYz5WO",
        "outputId": "9600648b-1c17-4610-f06e-159723d2755a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__add__',\n",
              " '__class__',\n",
              " '__contains__',\n",
              " '__delattr__',\n",
              " '__dir__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getitem__',\n",
              " '__getnewargs__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__iter__',\n",
              " '__le__',\n",
              " '__len__',\n",
              " '__lt__',\n",
              " '__mod__',\n",
              " '__mul__',\n",
              " '__ne__',\n",
              " '__new__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__rmod__',\n",
              " '__rmul__',\n",
              " '__setattr__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__subclasshook__',\n",
              " 'capitalize',\n",
              " 'casefold',\n",
              " 'center',\n",
              " 'count',\n",
              " 'encode',\n",
              " 'endswith',\n",
              " 'expandtabs',\n",
              " 'find',\n",
              " 'format',\n",
              " 'format_map',\n",
              " 'index',\n",
              " 'isalnum',\n",
              " 'isalpha',\n",
              " 'isascii',\n",
              " 'isdecimal',\n",
              " 'isdigit',\n",
              " 'isidentifier',\n",
              " 'islower',\n",
              " 'isnumeric',\n",
              " 'isprintable',\n",
              " 'isspace',\n",
              " 'istitle',\n",
              " 'isupper',\n",
              " 'join',\n",
              " 'ljust',\n",
              " 'lower',\n",
              " 'lstrip',\n",
              " 'maketrans',\n",
              " 'partition',\n",
              " 'removeprefix',\n",
              " 'removesuffix',\n",
              " 'replace',\n",
              " 'rfind',\n",
              " 'rindex',\n",
              " 'rjust',\n",
              " 'rpartition',\n",
              " 'rsplit',\n",
              " 'rstrip',\n",
              " 'split',\n",
              " 'splitlines',\n",
              " 'startswith',\n",
              " 'strip',\n",
              " 'swapcase',\n",
              " 'title',\n",
              " 'translate',\n",
              " 'upper',\n",
              " 'zfill']"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 문자열의 메서드\n",
        "# 'capitalize','casefold','center','count','encode',\n",
        "# 'endswith','expandtabs','find','format','format_map',\n",
        "# 'index','isalnum','isalpha','isascii','isdecimal','isdigit',\n",
        "# 'isidentifier','islower','isnumeric','isprintable','isspace',\n",
        "# 'istitle','isupper','join','ljust','lower','lstrip',\n",
        "# 'maketrans','partition','removeprefix','removesuffix',\n",
        "# 'replace','rfind','rindex','rjust','rpartition','rsplit',\n",
        "# 'rstrip','split','splitlines','startswith','strip','swapcase',\n",
        "# 'title','translate','upper','zfill'"
      ],
      "metadata": {
        "id": "8v9ORs0wz7M6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "s = 'paullab CEO leehojun'\n",
        "s.lower(), s.upper() \n",
        "# 특히 사용자에게 입력을 받는 경우 lower도 많이 사용합니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h3rHBF2q0ccP",
        "outputId": "9c2caee2-4622-442d-e30e-47f88321819d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('paullab ceo leehojun', 'PAULLAB CEO LEEHOJUN')"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = 'paullab CEO leehojun'\n",
        "s.find('C'), s.index('C')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J1XZeKRq0nyr",
        "outputId": "2a9e09f3-0bc8-412c-98f4-845e8ef0d744"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 견고한 코드란?\n",
        "# 시간이 지나도 그대로 사용할 수 있고\n",
        "# error가 예측 가능하게 나는 코드\n",
        "# 네이버에 이미지 슬라이딩 코드\n",
        "# bool(s.find('Z')) => -1은 True이기 때문에 주의가 필요합니다.\n",
        "s.find('Z')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZI_2ilR71RrP",
        "outputId": "527cab8b-6de4-49dd-947a-613c379d1aa5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-1"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Error가 나면 Error를 주는 것이 좋을 수 있습니다.\n",
        "# Error를 안주는 언어로 JavaScript\n",
        "s.index('Z')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "r-N9BWGI1icv",
        "outputId": "a4087e50-bf59-4788-c464-e08b14d1f605"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-85c68513f932>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Error가 나면 Error를 주는 것이 좋을 수 있습니다.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Error를 안주는 언어로 JavaScript\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Z'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m: substring not found"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = 'paullab CEO leehojun'\n",
        "s.find('CEO')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_028fVhM2fcV",
        "outputId": "b6048a07-4f6d-4a9c-f8dc-e201c531aa53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 별 5개\n",
        "s = 'paullab CEO leehojun'\n",
        "s.count('l')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tWJfrb6J2wAN",
        "outputId": "b2108642-27a8-43ea-834e-df6fa56152db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str([1, 2, 3, 4, 5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "Q5Pdxwt721HM",
        "outputId": "81af1ab2-c4e8-4db7-ac09-ea200d09fd50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'[1, 2, 3, 4, 5]'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str([1, 2, 3, 4, 5]).count(' ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EccL4X063A7i",
        "outputId": "2bd10bbf-a05c-4ccd-e173-f7ae3048f404"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str([1, 2, 3, 4, 5]).count(',')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o7jBZFYA3E0R",
        "outputId": "a123e4f0-7145-46e7-83c8-5b7946758cf2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str([1, 2, 11, 4, 111]).count('1')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2sZCJILx3IuQ",
        "outputId": "3c716701-78d7-4cf8-87de-62d83cd1fa78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str(list(range(0, 10001))).count('8')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "06OUri5l5dWV",
        "outputId": "dc89cf7d-31ae-49da-9f07-63a4371198af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4000"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* https://codingdojang.com/scode/393?answer_mode=hide"
      ],
      "metadata": {
        "id": "TrBrUwOA3mDb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str([1,2,3,4,5]).count(' ') \n",
        "# list는 콤마 다음에 공백이 없더라도 공백으로 인식해줍니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zneiE8k43neD",
        "outputId": "344de3ba-8375-4019-b02a-c8ab0e4400c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str([1,\n",
        "     2,\n",
        "     3,\n",
        "     4,\n",
        "     5]).count(' ')\n",
        "# list는 콤마 다음에 공백이 없더라도 공백으로 인식해줍니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bMCFS2KL4pao",
        "outputId": "9ec7aaea-724c-40b5-bd86-69b094d561b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'hello'.count('')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PQ9e39Of4HaA",
        "outputId": "4f6cf330-9cdd-4532-abf1-2f51479f91cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'a'.count('')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sb3Movhi4alU",
        "outputId": "386f5da3-7f47-4b1e-f0ce-421d85230aac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "''.count('')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F-_Q0q9u4VwR",
        "outputId": "c7c7cd3f-9465-4c47-f490-f1e84b258d76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'' + ''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "l7wUovyB4fz3",
        "outputId": "ea3589d3-a127-4014-b12b-730ab37e6a52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "''"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'   hello   !  '.strip() # 공백제거 메서드"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "dbd7lYMi6Yqj",
        "outputId": "e11d1fb3-009a-474a-b813-8111098fdf37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hello   !'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'   hello   !  '.rstrip()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "WVS77H4V6mUE",
        "outputId": "0d666718-3f44-46ca-edb8-4be3523d64c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'   hello   !'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'   hello   !  '.lstrip()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "CEQN_QWY6qzH",
        "outputId": "96923884-f760-4268-99d8-173698289a96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hello   !  '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 별 5개\n",
        "'hello world hi'.replace(' ', '!')\n",
        "'hello world hi'.replace('world', 'W@O@R@L@D').upper()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "5F8ftW7v62_v",
        "outputId": "d85ef3db-a9be-4c22-d732-443654001608"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'HELLO W@O@R@L@D HI'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'hello world hi'.replace('world', 'W@O@R@L@D').upper().split('@')\n",
        "# 반환값이 list이기 때문에 메서드 체이닝을 하려면 \n",
        "# 이후로 list 메서드를 사용해야 합니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LhlU1SoG7UQE",
        "outputId": "f46e358d-1548-420f-b741-512d9d96c974"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['HELLO W', 'O', 'R', 'L', 'D HI']"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'hello world hi'.replace(' ', '')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "HgCloIUj7qE1",
        "outputId": "e0eddfd3-c2b6-4473-bd70-2e801f59147e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'helloworldhi'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = '''  \"+ +-+ -+-\"  \n",
        "  \"++ -- +-+\"  \n",
        "  \"++-+ -+ -\"  \n",
        "  \"+ ++-+ -+\"  '''\n",
        "\n",
        "data.split('\\n')[0].replace(' ', '').replace('\"', '')\n",
        "\n",
        "# Pythonic하지 않다!\n",
        "data.split('\\n')[0].replace(' ', \n",
        "                '').replace('\"', \n",
        "                '')\n",
        "\n",
        "# Pythonic하게 하려면\n",
        "data.split('\\n')[0]\\\n",
        "                .replace(' ', '')\\\n",
        "                .replace('\"', '')\\\n",
        "                .replace('\"', '')\\\n",
        "                .replace('\"', '')\\\n",
        "                .replace('\"', '')\\\n",
        "                .replace('\"', '')\\\n",
        "                .replace('\"', '')\\\n",
        "                .replace('\"', '')\n",
        "\n",
        "# 제가 사용하는 기법\n",
        "processed_string = data.split('\\n')[0].replace(' ', '').replace('\"', '')\n",
        "processed_string.replace('\"', '').replace('\"', '')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "LOvQCma879mP",
        "outputId": "62e34a11-8229-41f3-9ef5-bbda10b0e29b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'++-+-+-'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 79자\n",
        "# 아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아 39자"
      ],
      "metadata": {
        "id": "UzFN4lWq_b0Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = '''  \"+ +-+ -+-\"  \n",
        "  \"++ -- +-+\"  \n",
        "  \"++-+ -+ -\"  \n",
        "  \"+ ++-+ -+\"  '''\n",
        "\n",
        "data.split('\\n')[0].replace(' ', '').replace('\"', '').replace('+', '1').replace('-', '0')\n",
        "ord('A'), chr(65) # ord는 문자를 가지고 숫자로 변경 chr은 숫자를 가지고 문자로 변경합니다.\n",
        "\n",
        "숫자 = data.split('\\n')[0].replace(' ', '').replace('\"', '').replace('+', '1').replace('-', '0')\n",
        "int(숫자, 2)\n",
        "chr(int(숫자, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "OaxoAwFoA3Ou",
        "outputId": "c556f3e4-5ed3-4067-c9f6-22fbf8142432"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'j'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 별 4.5개\n",
        "'paullab CEO leehojun'.split(' ') #문자열을 쪼개어 줍니다.\n",
        "'paullab!CEO!leehojun'.split('!')\n",
        "'paullab,CEO,leehojun'.split(',')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CjjncWxRCDN2",
        "outputId": "9a435c70-6291-4569-fd95-e223d014d4c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['paullab', 'CEO', 'leehojun']"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 퀴즈\n",
        "'010 5044 2903' # 1번\n",
        "'010-5044-2903' # 2번\n",
        "'010 5044-2903' # 3번"
      ],
      "metadata": {
        "id": "gkhSY2pjCJGC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 원하는 결과값\n",
        "# ['010', '5044', '2903']\n",
        "# [10, 5044, 2903] # 010은 error가 나기 때문에 10으로 저장"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cR5wOce2CPrm",
        "outputId": "82668af9-13d8-42db-c01d-4dca1160604c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[10, 5044, 2903]"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'010 5044 2903'.split(' ')\n",
        "'010-5044-2903'.split('-')\n",
        "'010 5044-2903'.replace(' ', '-').split('-')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQkuKM8dFeRC",
        "outputId": "3d1d0cd8-43f1-4560-df75-2c66f3456407"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['010', '5044', '2903']"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'010 5044 2903'.split() # 공백단위가 들어가기 됩니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8vKz9b_1Fv0S",
        "outputId": "f9924291-1224-4a37-9385-cf7a80e9ee13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['010', '5044', '2903']"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# '01050442903'.split('') # 빈 문자열을 넣지는 못합니다."
      ],
      "metadata": {
        "id": "VchqEmS4F2L9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "list(map(int,'010 5044 2903'.split(' ')))"
      ],
      "metadata": {
        "id": "OhV1Ll56GAG7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "int('010')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b7k1FI7gMO4G",
        "outputId": "dad839ec-da7d-4bd6-b887-02a6027c94d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print(010) # error"
      ],
      "metadata": {
        "id": "0xRg5xOPMR8g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num ='010 5044-2903'.replace('-',' ').split(' ')\n",
        "[int(i) for i in num] # 리스트 컴프리헨션 사용\n",
        "list(map(int, '010 5044 2903'.split(' ')))\n",
        "\n",
        "# 2개 모두 새로운 리스트를 만드는 것입니다.\n",
        "# 원본을 변경시키지 않습니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aSI-R1PVMcFv",
        "outputId": "0f56cadf-d7aa-4ac7-e15d-889947b91e08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[10, 5044, 2903]"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 이 코드 보다는\n",
        "s = []\n",
        "for i in '010 5044-2903'.replace('-',' ').split(' '):\n",
        "    s.append(int(i))\n",
        "s\n",
        "\n",
        "# 요 코드를 추천합니다.\n",
        "[int(i) for i in num]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mTb4latVM_E3",
        "outputId": "4296b99f-c6e8-4e3a-dfb4-e19ffa5963d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[10, 5044, 2903]"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 지금 진도에서 과하기 때문에 \n",
        "# 지금은 잊으셔도 됩니다.\n",
        "# 뒤에서 상세하게 다룹니다.\n",
        "def 제곱함수(x):\n",
        "    return x ** 2\n",
        "\n",
        "def 정수함수(x):\n",
        "    return int(x)\n",
        "\n",
        "list(map(제곱함수, [1, 2, 3]))\n",
        "list(map(정수함수, ['1', '2', '3']))\n",
        "list(map(int, ['1', '2', '3']))\n",
        "\n",
        "list(map(int, ['010', '5044', '2903']))\n",
        "list(map(int,'010 5044 2903'.split(' ')))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HmHlfOQQGKJn",
        "outputId": "478ed352-6e96-48d7-f035-7aeb5605730f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[10, 5044, 2903]"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 별 4.5 개\n",
        "'~'.join(['hello', 'world', 'hello'])\n",
        "'!'.join(['hello', 'world', 'hello'])\n",
        "''.join(['hello', 'world', 'hello'])\n",
        "' '.join(['hello', 'world', 'hello'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "BFFvaHDqHRXF",
        "outputId": "a5f098bd-f4a7-4cc8-bb6c-2c2271292e41"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hello world hello'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'hello'.isalpha()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Md6KDkQH5AB",
        "outputId": "1d41790a-ba2a-4844-ad24-20ddc8b8eff4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'he llo'.isalpha()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "neHWzABWIAei",
        "outputId": "b44c1b52-834e-4ac7-a083-84a54299a0f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'123'.isdigit()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "McC_9BWrIGlZ",
        "outputId": "57272877-2134-4fa8-e863-ac469a6679e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'12a3'.isdigit(), '12 3'.isdigit()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dhOpP3MfIJaJ",
        "outputId": "676dda5b-f787-4e9e-a484-5c00c007035b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'12a3'.isalnum(), '12 3'.isalnum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_sQWXeAFIUHD",
        "outputId": "43b8c785-9e87-4955-b5a0-b6ff7329fc05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(True, False)"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'안녕하세요!'.isalpha(), '안녕하세요!'.isalnum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jKjJFISBIb9Q",
        "outputId": "1ea6d47d-6162-4d68-98bf-469449f853aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(False, False)"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 퀴즈\n",
        "# 숫자를 모두 더하라!\n",
        "result = 0\n",
        "for i in '123abc913sldlf':\n",
        "    # print(i.isdigit())\n",
        "    if i.isdigit():\n",
        "        result += int(i) # result = result + int(i)\n",
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-XrpDD93Im_1",
        "outputId": "16b6fd66-e593-455e-e4f2-76e6db35afa1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "19"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result = 0\n",
        "for i in '123abc913sldlf':\n",
        "    if i.isdigit():\n",
        "        result += int(i)\n",
        "result"
      ],
      "metadata": {
        "id": "QqgISZHCJPQp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'paullab CEO leehojun'.isascii()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FefJOIHFNbfe",
        "outputId": "8994ec54-d8fe-43eb-bc4d-385ec1144521"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'paullab CEO leehojun'.rjust(30) #오른쪽 정렬\n",
        "'paullab CEO leehojun'.ljust(30) #왼쪽 정렬\n",
        "'paullab CEO leehojun'.center(30)#가운데 정렬"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "GSgKmh2EJhxy",
        "outputId": "500562eb-f5bc-4191-8772-27c62f19a893"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'     paullab CEO leehojun     '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'hello'.zfill(20) # 데이터의 빈 공간을 0으로 채워줍니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "bxrZraemN1wc",
        "outputId": "74c7040c-52bc-4e79-dbd6-2db41135f800"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'000000000000000hello'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'1001'.zfill(5)\n",
        "'hello'.zfill(10).replace('0', '-')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "tlsh_QNTOH-K",
        "outputId": "ea0c7f3e-41c7-44c3-9376-1a2c321eb35b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'-----hello'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "규칙테이블 = str.maketrans({'\\n':'', '\\t':''})\n",
        "'paullab \\n\\n\\n CEO \\t\\t\\t leehojun'.translate(규칙테이블)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "LZWRM2ObOhS8",
        "outputId": "f957204a-de6e-4217-cd09-97a72462f3e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'paullab  CEO  leehojun'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'paullab \\n\\n\\n CEO \\t\\t\\t leehojun'.replace('\\n', '').replace('\\t', '')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "0-4EXBsROn-R",
        "outputId": "cd29683b-e55f-488b-d2d8-2a4ac0f1fe1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'paullab  CEO  leehojun'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "규칙테이블 = str.maketrans('\\n\\t', '  ') # 똑같은 길이를 가지고 있어야 함\n",
        "'paullab \\n\\n\\n CEO \\t\\t\\t leehojun'.translate(규칙테이블)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "tHgF0nkoO8L6",
        "outputId": "5ba4f590-a87a-4641-9d6b-ae844167b930"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'paullab     CEO     leehojun'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "규칙테이블 = str.maketrans('le','12')\n",
        "'paullab CEO leehojun'.translate(규칙테이블) #어떤 규칙을 정하는것"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "vRO4DK5CPF3C",
        "outputId": "ad355982-2f02-4081-8b9c-2b255da6e4db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'pau11ab CEO 122hojun'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## pep"
      ],
      "metadata": {
        "id": "wqdkfJDfPP1i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa => 80자\n",
        "# 아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아 => 40자면 한글 넘어갑니다.\n",
        "# line에 딱 맞춰 들어간 것을 볼 수 있습니다. \n",
        "# 강제사항은 아닙니다.\n",
        "# 띄어쓰기 4번도 강제사항은 아닙니다.\n",
        "# pep8, pep20에 기술되어 있습니다. => pep(Python Enhancement Proposal)란 무엇인가요? 8이란 무엇인가요?\n",
        "# pep8 : Style Guide for Python Code (https://peps.python.org/pep-0008/)\n",
        "# pep20 : The Zen of Python(https://peps.python.org/pep-0020/) #이스터애그로 숨겨져 있습니다.\n",
        "# https://peps.python.org/"
      ],
      "metadata": {
        "id": "GuJRXXPsPW0N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## cpython\n",
        "\n",
        "* 공식홈페이지에서 다운로드 받는 것이 cpython입니다.\n",
        "* https://github.com/python/cpython\n",
        "* list를 구현한 코드 : https://github.com/python/cpython/blob/main/Objects/listobject.c"
      ],
      "metadata": {
        "id": "2xoiw-BTQlRx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 인덱싱과 슬라이싱"
      ],
      "metadata": {
        "id": "zxQW-G0ASV5B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name = 'Guido van Rossum'\n",
        "print(name[0])\n",
        "print(name[1])\n",
        "print(name[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fYaI0NEeRWmG",
        "outputId": "eba2a6c3-ec0a-46a5-dbe0-7810e8bb4f11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "G\n",
            "u\n",
            "i\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# s[start:stop:step]\n",
        "s = 'paullab CEO leehojun'\n",
        "s[5:]\n",
        "s[:5]\n",
        "s[3:10]\n",
        "s[:]\n",
        "s[0:20:2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "YRcJ-FENSdag",
        "outputId": "6ae54a12-9e57-41e5-8bb4-538b1c77392c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'pulbCOleou'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 자주 사용되는 코드\n",
        "s = 'paullab CEO leehojun!'\n",
        "s[:] # string에서는 많이 사용하지 않지만 list에서 많이 사용합니다.\n",
        "s[:-1] # 마지막 요소만 제외하고 다 슬라이싱 합니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "dXZU1G-4TJGt",
        "outputId": "6ee20fef-c7c3-4df8-cbee-23d0257fa4e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'paullab CEO leehojun'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test = [1, 2, 3, 4]\n",
        "test2 = test\n",
        "test2[0] = 1000\n",
        "test, test2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uuvvoUl1TdVM",
        "outputId": "83d410ef-bbee-4b6f-b193-f52957a864bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([1000, 2, 3, 4], [1000, 2, 3, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test = [1, 2, 3, 4]\n",
        "test2 = test[:] # 새로운 리스트를 만들어서 test2에게 줍니다.\n",
        "test2[0] = 1000\n",
        "test, test2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WIMsBsOoTtdu",
        "outputId": "cd51ab95-0363-4d0e-892a-5547f05e8c3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([1, 2, 3, 4], [1000, 2, 3, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 문자열의 연산"
      ],
      "metadata": {
        "id": "SE9464pnUoRy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s = 'hello world'\n",
        "dir(s)\n",
        "s + s\n",
        "s * 3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "ESuIHzC8UYtB",
        "outputId": "9e8c31b4-267e-4854-8e96-1401d4c7f0f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hello worldhello worldhello world'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 형변환"
      ],
      "metadata": {
        "id": "wvm0O7jOUuCu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 형변환 : type을 변경하는 것입니다."
      ],
      "metadata": {
        "id": "p6cWnOkZWHnr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = int(input())\n",
        "x + x # but 알파벳 입력하면 error!"
      ],
      "metadata": {
        "id": "b8L-GGjmUyGK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = input()\n",
        "if x.isdigit():\n",
        "    x = int(x) # but 알파벳 입력하면 error!\n",
        "x + x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hKYuteAhU6mv",
        "outputId": "41218b76-953c-47cf-ee23-06d71ec45c7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "10\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# int('abc') # error\n",
        "int(10.1) # 버림\n",
        "int('10') # 형변환 가능\n",
        "# int('10.1') # 형변환 불가능"
      ],
      "metadata": {
        "id": "ohS3HFvwVKd8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "float('10') # 형변환 가능\n",
        "float('10.1') # 형변환 가능"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K6fUrM16Vqdn",
        "outputId": "78475d0e-9a6d-4847-d599-d49f2b3d0f75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10.1"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "int('10a') # 되는 언어가 있어서 보여드린 것입니다.\n",
        "# Python에서는 허용하지 않습니다."
      ],
      "metadata": {
        "id": "ZLNfzYkOVyRW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def hello():\n",
        "    pass\n",
        "\n",
        "str(type)\n",
        "str(hello)\n",
        "\n",
        "str('123')\n",
        "str(True)\n",
        "str(None)\n",
        "str([1, 2, 3])\n",
        "str({1, 2, 3})\n",
        "str({'one':1, 'two':2})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "a9iGS1JFWLx1",
        "outputId": "4da63f84-bf60-43f1-99cc-7440ccc0da1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"{'one': 1, 'two': 2}\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 별 5개\n",
        "# bool 형으로 형변환 하는 것\n",
        "if True:\n",
        "    print('hi')\n",
        "\n",
        "if 'hello':\n",
        "    print('hi')\n",
        "\n",
        "# 정말 많이 사용하는 코드\n",
        "l = [1, 2, 3]\n",
        "while l:\n",
        "    print(l.pop())\n",
        "\n",
        "bool('') # 빈 문자열을 제외하고 모두 True\n",
        "bool('a')\n",
        "bool('False') # 문자열 False이기 때문에 True\n",
        "bool(0) # 0을 제외하고 모두 True\n",
        "bool(-1)\n",
        "bool(100)\n",
        "bool(None) # None은 비어있음을 명시해주는 키워드, False\n",
        "bool([]) # 컨벤션 자료형은 비어있으면 False입니다.\n",
        "bool({})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3V-MyX9KW3qT",
        "outputId": "f9dd2ffb-0d2f-41e1-8b5b-c8f6e6140f63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hi\n",
            "hi\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# list로 형변환\n",
        "s = '10'\n",
        "l = list(s)\n",
        "l"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5QL1EB6zphC0",
        "outputId": "68d2ed29-b870-444c-8b1c-4d0c3b456446"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['1', '0']"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = 'leehojun'\n",
        "l = list(s)\n",
        "l"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0BVdlmK_pp3G",
        "outputId": "f57092f3-8269-4e3c-fc81-dff3d82e5ce7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['l', 'e', 'e', 'h', 'o', 'j', 'u', 'n']"
            ]
          },
          "metadata": {},
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# tuple로 형변환\n",
        "s = 'leehojun'\n",
        "l = tuple(s)\n",
        "l"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pX2dv4E3pvqS",
        "outputId": "ff53b373-bc0e-447d-cd30-ec09bf3aedb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('l', 'e', 'e', 'h', 'o', 'j', 'u', 'n')"
            ]
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# dict\n",
        "# name = 'leehojun' # error\n",
        "# dict(name)\n",
        "\n",
        "s = [('name','leehojun'), ('age',10)]\n",
        "d = dict(s)\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ugVTT0Fmp3cX",
        "outputId": "c9ad4f88-8e99-44af-8072-956fe9e2846f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'name': 'leehojun', 'age': 10}"
            ]
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# set(집합)으로 형변환\n",
        "name = 'leehojun'\n",
        "set(name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z1TN86-KqNMo",
        "outputId": "ea565eba-1187-4039-eafe-1cb921fecbff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'e', 'h', 'j', 'l', 'n', 'o', 'u'}"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len('hello world') # __len__\n",
        "len([1, 2, 3, 4])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cg1IqW9eqcSx",
        "outputId": "a6bf90ce-feec-4d7e-9d4c-8f60b35cf72f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 문제풀이"
      ],
      "metadata": {
        "id": "WZMJ_b6lryGx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1번의 오답(아래처럼 변수를 선언하지 않도록 주의해주세요.)\n",
        "\n",
        "#1번\n",
        "# print = 100\n",
        "\n",
        "#2번\n",
        "# 10 = a\n",
        "\n",
        "#4번\n",
        "# 100k = 10000"
      ],
      "metadata": {
        "id": "F7ZMC2Yorz6T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 2번\n",
        "user_input = input('문자를 입력해주세요!')\n",
        "print(user_input * 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IVBU1tpnsP45",
        "outputId": "657f3f4a-7f31-45dd-e469-6babcf97c0fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "문자를 입력해주세요!hello\n",
            "hellohello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(input('문자를 입력해주세요!') * 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kK1zBFvxs1PX",
        "outputId": "71204142-d6b4-4574-a2aa-dfe7634b272c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "문자를 입력해주세요!hello\n",
            "hellohello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3번\n",
        "num = 1234567890\n",
        "list(str(num))\n",
        "list(str(num))[3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "NjYn5LEpsY8N",
        "outputId": "43f55227-144d-4737-ffe7-96ed039aa092"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'4'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 산술연산"
      ],
      "metadata": {
        "id": "3fizKaOysxzY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "b = 3\n",
        "\n",
        "print(f'10 + 3 == {a + b}')\n",
        "print(f'10 - 3 == {a - b}')\n",
        "print(f'10 / 3 == {a / b}')\n",
        "print(f'10 // 3 == {a // b}') # 몫만 나옵니다.(정수만요!)\n",
        "print(f'10 * 3 == {a * b}')\n",
        "print(f'10 ** 3 == {a ** b}')\n",
        "print(f'10 % 3 == {a % b}') # 나머지"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GkwfpEO4s9Y1",
        "outputId": "d6475a20-04fd-4751-cf3c-eae7a47f0e0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 + 3 == 13\n",
            "10 - 3 == 7\n",
            "10 / 3 == 3.3333333333333335\n",
            "10 // 3 == 3\n",
            "10 * 3 == 30\n",
            "10 ** 3 == 1000\n",
            "10 % 3 == 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 연산자 우선순위는 and, or, 4칙연산, 제곱 정도만 아셔도 \n",
        "# 코딩하는데 큰 무리가 없습니다.\n",
        "# (모르시면 읽는데 어려움이 생기기도 합니다.)\n",
        "\n",
        "print(3 ** 2 * 3)\n",
        "print(3 * 3 ** 2) # 왜 81이 아니지?\n",
        "# 곱하기 보다 제곱이 우선순위가 더 높습니다.\n",
        "print(3 + 3 * 2) # 3 + 3부터 먼저 하지 않습니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f_ca-2M3tynC",
        "outputId": "bc0e30d3-3064-47f5-dd09-e648153bcabb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "27\n",
            "27\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "b = 3\n",
        "\n",
        "print(f'10 > 3 == {a > b}')\n",
        "print(f'10 >= 3 == {a >= b}')\n",
        "print(f'10 < 3 == {a < b}')\n",
        "print(f'10 <= 3 == {a <= b}')\n",
        "print(f'10 == 3 == {a == b}')\n",
        "print(f'10 != 3 == {a != b}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O4on8PEUu6SI",
        "outputId": "e01b6e66-5c75-47e8-e268-00a6299d852c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 > 3 == True\n",
            "10 >= 3 == True\n",
            "10 < 3 == False\n",
            "10 <= 3 == False\n",
            "10 == 3 == False\n",
            "10 != 3 == True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 논리연산"
      ],
      "metadata": {
        "id": "0SQhxPJvvQvW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# and 는 곱\n",
        "# or 는 합\n",
        "# not은 반대\n",
        "# True 1\n",
        "# False 0\n",
        "# 중요한 포인트는 저렇게 했을 때 언제 True가 되는지 정리하는 것\n",
        "\n",
        "print(True and False)\n",
        "print(True or False)\n",
        "print(True or True)\n",
        "\n",
        "if True and False:\n",
        "    print('hello')\n",
        "\n",
        "if 10 > 3 and 8 % 3 == 0:\n",
        "    print('hello')\n",
        "\n",
        "# and는 언제 True가 되나요?\n",
        "# 모두 True일 때만 True\n",
        "# or는 언제 True가 되나요?\n",
        "# 둘 중에 하나라도 참이라면 True"
      ],
      "metadata": {
        "id": "XODmtx6SvSfW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# https://codingdojang.com/scode/350?answer_mode=hide\n",
        "for i in range(101):\n",
        "    if i % 3 == 0 and i % 5 == 0:\n",
        "        print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JM5xR3TZwoW3",
        "outputId": "7fcddc3b-b1d5-4bea-bf0c-dc16d0270933"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "15\n",
            "30\n",
            "45\n",
            "60\n",
            "75\n",
            "90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(101):\n",
        "    if i % 3 == 0 or i % 5 == 0:\n",
        "        print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ka79qcZ3xO20",
        "outputId": "617d898e-5be4-4d0f-e8d4-a30300a847ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "3\n",
            "5\n",
            "6\n",
            "9\n",
            "10\n",
            "12\n",
            "15\n",
            "18\n",
            "20\n",
            "21\n",
            "24\n",
            "25\n",
            "27\n",
            "30\n",
            "33\n",
            "35\n",
            "36\n",
            "39\n",
            "40\n",
            "42\n",
            "45\n",
            "48\n",
            "50\n",
            "51\n",
            "54\n",
            "55\n",
            "57\n",
            "60\n",
            "63\n",
            "65\n",
            "66\n",
            "69\n",
            "70\n",
            "72\n",
            "75\n",
            "78\n",
            "80\n",
            "81\n",
            "84\n",
            "85\n",
            "87\n",
            "90\n",
            "93\n",
            "95\n",
            "96\n",
            "99\n",
            "100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result = 0\n",
        "for i in range(101):\n",
        "    if i % 3 == 0:\n",
        "        result += i # result = result + i\n",
        "    if i % 5 == 0:\n",
        "        result += i\n",
        "    if i % 15 == 0:\n",
        "        result -= i\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bYAYR-FLxeHo",
        "outputId": "d7cb847a-e764-400c-8ee5-9704dde18971"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2418\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result = 0\n",
        "for i in range(101):\n",
        "    if i % 3 == 0 or i % 5 == 0:\n",
        "        result += i\n",
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YWveReaZyLT9",
        "outputId": "686d9964-f171-4771-9e38-3468aeb26320"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2418"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "not True"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HgGle7OFyeGC",
        "outputId": "54575373-61cc-41cf-c5a6-8341fad2d773"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "not False"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hLkwFVkaygQG",
        "outputId": "b41ae455-806d-4d12-9994-19ea6aa55c62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 173
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# python 입장에서 보는 코드\n",
        "# False and ????? => 물음표에 무엇이 나오든 False\n",
        "# 그래서 Python도 저 물음표를 보지 않습니다.\n",
        "def solution():\n",
        "    1/0\n",
        "\n",
        "if False and solution():\n",
        "    print('hello')"
      ],
      "metadata": {
        "id": "bSXIECNByno-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# True or ?????  => 물음표에 무엇이 나오든 True\n",
        "# 그래서 Python도 저 물음표를 보지 않습니다.\n",
        "def solution():\n",
        "    1/0\n",
        "\n",
        "if True or solution():\n",
        "    print('hello')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oc4YaEts1yJS",
        "outputId": "fc5188fa-dfd8-4299-d6b0-2aa5fc9cf405"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 단락 평가(컴퓨터가 어디까지 보는지 판단해서 활용)\n",
        "username = '' # 사용자가 아무것도 입력하지 않았을 경우\n",
        "username = username or 'licat'\n",
        "username"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "uxV3ZZPU2Alj",
        "outputId": "4a939bc1-9e28-4098-e232-f5fd21605dc2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'licat'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "username = 'leehojun' # 사용자가 이름을 입력했을 경우\n",
        "username = username or 'licat'\n",
        "username"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "SnTi6bKg2aaL",
        "outputId": "ed918ee2-5340-452e-ec3c-0b476a8080fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'leehojun'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# and와 or의 우선순위(and가 더 높습니다.)\n",
        "for i in range(21):\n",
        "    if i % 3 == 0 and i % 5 == 0 or i % 2 == 0:\n",
        "        print(i)\n",
        "\n",
        "for i in range(21):\n",
        "    if (i % 3 == 0 and i % 5 == 0) or i % 2 == 0:\n",
        "        print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NV_9iBOI2qd8",
        "outputId": "89d8836e-bd65-4e93-d4ac-f91571d30a97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "2\n",
            "4\n",
            "6\n",
            "8\n",
            "10\n",
            "12\n",
            "14\n",
            "15\n",
            "16\n",
            "18\n",
            "20\n",
            "0\n",
            "2\n",
            "4\n",
            "6\n",
            "8\n",
            "10\n",
            "12\n",
            "14\n",
            "15\n",
            "16\n",
            "18\n",
            "20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 아래는 출력되는 값이 다릅니다! 우선순위가 낮은 or가 먼저 나왔기 때문입니다.\n",
        "# 결론 : 헷갈리시면 괄호를 사용해주세요!\n",
        "for i in range(21):\n",
        "    if (i % 3 == 0 or i % 5 == 0) and i % 2 == 0:\n",
        "        print(i)\n",
        "\n",
        "for i in range(21):\n",
        "    if i % 3 == 0 or i % 5 == 0 and i % 2 == 0:\n",
        "        print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g7YSDp1B3ASE",
        "outputId": "a74791d7-2c1c-4ca0-aca3-57e83366d1e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "6\n",
            "10\n",
            "12\n",
            "18\n",
            "20\n",
            "0\n",
            "3\n",
            "6\n",
            "9\n",
            "10\n",
            "12\n",
            "15\n",
            "18\n",
            "20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 비트연산 (중요도 하)"
      ],
      "metadata": {
        "id": "u76LB8tS4DmX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# and(곱하기)\n",
        "# 1001 == 9\n",
        "# 0010 == 2\n",
        "# ----\n",
        "# 0000"
      ],
      "metadata": {
        "id": "V1huJIf54Fyr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "9 & 2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IsB1qHf54ml4",
        "outputId": "c6f534d0-e18c-4014-80ee-77986358d35c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 189
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# and(곱하기)\n",
        "# 1001 == 9\n",
        "# 1000 == 8\n",
        "# ----\n",
        "# 1000"
      ],
      "metadata": {
        "id": "sGHH0TFy4ziy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "9 & 8"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w-dvlv7x4rak",
        "outputId": "e3db0ac5-e11d-473c-cde4-130069751f74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 190
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# or(더하기, 대신 자리올림이 되진 않습니다.)\n",
        "# 1001 == 9\n",
        "# 0011 == 3\n",
        "# ----\n",
        "# 1011\n",
        "\n",
        "9 | 3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-N8ra5u15f0w",
        "outputId": "b1a126d9-7e66-48e5-9fcb-044fffa74f64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11"
            ]
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# xor(같을 경우 0, 다를경우 1)\n",
        "# 1001 == 9\n",
        "# 0011 == 3\n",
        "# ----\n",
        "# 1010\n",
        "9 ^ 3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vlXlPPNO52WZ",
        "outputId": "fc5a1c36-8068-4ee5-bc18-62b85981cc68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 192
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "~9 # 2보수를 취하는 것입니다.(9에게 +1한 다음에 -를 취하시면 됩니다.)\n",
        "~-7 # 2보수를 취하는 것입니다.(7에게 +1한 다음에 -를 취하시면 됩니다.)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FyLxf6MO6MQL",
        "outputId": "a73afc25-4464-4dcb-8c65-11a0bde55e6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 194
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "3 << 2 \n",
        "# 3을 2진수로 표현하면 11인데 2칸을 왼쪽으로 미는 것입니다.\n",
        "# 1100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zVnM1Tc76gr7",
        "outputId": "109f4495-4229-4d1c-8794-5f5a8b29d7d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12"
            ]
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "7 >> 2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HhcDMOIt7jrm",
        "outputId": "32ccbba3-8a64-4f7c-947e-c05605c9c045"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 디스코드 단축키"
      ],
      "metadata": {
        "id": "s_Rleu857Ae7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* `:ok`"
      ],
      "metadata": {
        "id": "cTxtLYkQ7Cmt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 할당연산"
      ],
      "metadata": {
        "id": "pby2ogMp72SI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# a = 10\n",
        "# a = a + 10\n",
        "a = + 10 # 이렇게 a를 지우면 양수를 표현하는 10만 남아요.\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bBFEVmG374Y9",
        "outputId": "e4cefb5c-5439-4838-9c47-c0f486c69dfd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 198
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "a += 10 # a = a + 10\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5IQUOuRz8Q4V",
        "outputId": "fcb1f622-aa36-4e82-9a96-8d9484a1bf65"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "metadata": {},
          "execution_count": 199
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "a //= 10 # 산술연산 모두 됩니다.\n",
        "a"
      ],
      "metadata": {
        "id": "rb3Y9e2F89cY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Python에서 특이하게 ++a, ++b, a++, b++가 없습니다."
      ],
      "metadata": {
        "id": "IUypUATl9QiE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 식별연산자"
      ],
      "metadata": {
        "id": "hbJ-LWJE9ikg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 앞으로 아래 2개를 활용해서 Python에 \n",
        "# 컨벤션 자료형이 어떻게 구성이되는지 확인해볼겁니다.\n",
        "# id()\n",
        "# is"
      ],
      "metadata": {
        "id": "5EtyP2zy9akA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = 256\n",
        "b = 256\n",
        "a is b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x5aEKYFG90Zl",
        "outputId": "68bcf328-6d2b-46f9-8cbf-33ef12bd778b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 201
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 999\n",
        "b = 999\n",
        "a is b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UYYf4Ehd9vSq",
        "outputId": "5e518439-f2b9-4e5c-9090-546153c632d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 200
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1, 2, 3]\n",
        "b = [1, 2, 3]\n",
        "a is b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IqVa7m7-94hB",
        "outputId": "83c70166-ac97-4f1e-f565-4a187e5e6d60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 205
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a[0] = 100\n",
        "a, b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "obOrHsZ2-jj4",
        "outputId": "852d46db-3754-42b3-fe7f-b1326e49660f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([100, 2, 3], [1, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 206
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1, 2, 3]\n",
        "b = [1, 2, 3]\n",
        "a == b # Python에 등호는 type과 value를 봅니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EjSHcTyR9__D",
        "outputId": "27c4b9c9-0c30-4584-8355-a632535a32d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# is는 주소값을 비교합니다.\n",
        "id(a) == id(b) # 이게 False면 is도 False입니다."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2sct10LR_Nw9",
        "outputId": "8ed49dcb-d3fd-42b7-a5db-c2a1b032f4bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 212
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1, 2, 3]\n",
        "b = [1, 2, 3]\n",
        "\n",
        "id(a) #5152"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZMIKk8pTLtKv",
        "outputId": "ad40fe8d-2ea6-4131-a2a1-784cfa935be6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "139943949385152"
            ]
          },
          "metadata": {},
          "execution_count": 234
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "id(b) #9280"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WtAjjAeBLyKv",
        "outputId": "2c959cdc-e474-4137-c464-90225fe56920"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "139943949529280"
            ]
          },
          "metadata": {},
          "execution_count": 235
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a == b # 값이 같은 것과 메모리에 같은 공간에 저장되어 있다는 얘기는 다른 얘기입니다!"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_YAakir3MDZh",
        "outputId": "cfd6deb7-ef95-481d-fa35-044f51dea77e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 236
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## not의 위치"
      ],
      "metadata": {
        "id": "YmXL__Ru-yuP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "b = 100\n",
        "a is not b\n",
        "# a not is b # error"
      ],
      "metadata": {
        "id": "Y1DCLQNS-x8b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = 10\n",
        "b = [10, 20, 30]\n",
        "a not in b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xC2a1krp-_fw",
        "outputId": "21ccd85f-9cb2-44b9-8ee2-ef788b1eb5a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 211
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 멤버연산"
      ],
      "metadata": {
        "id": "pZ6qv8ic_gkV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'a' in 'helalo world'\n",
        "'a' in 'hello world'\n",
        "'a' in ['a', 'b']\n",
        "'a' in {'a':10, 'b':20}\n",
        "# 10 in {'a':10, 'b':20} # dict안에있는 value값이 있는지 확인하고 싶으면\n",
        "10 in {'a':10, 'b':20}.values()\n",
        "10 in {10, 20, 30}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zK1XBzYg_ig-",
        "outputId": "f479b2d5-f5b4-45d5-f639-440488995ff5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 223
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'a' not in ['aa', 'bb']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z2PHJzUIAAlJ",
        "outputId": "5ee57fbd-25c1-4231-e3fa-9c4ff4d6c651"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 222
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "10 in [10, 20, 30]\n",
        "[10] in [10, 20, 30]\n",
        "[10] in [[10], 20, 30]\n",
        "[10, 20] in [10, 20, 30]\n",
        "[10, 20] in [[10, 20], 30]\n",
        "set([10, 20]).issubset(set([10, 20, 30]))\n",
        "{10, 20}.issubset({10, 20, 30, 40})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T9HoZ75bDc9b",
        "outputId": "1e122ccc-e26e-4b53-db8e-08924405f251"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 230
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 연습문제"
      ],
      "metadata": {
        "id": "lm3tKaruD9L7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#1번\n",
        "a = 100\n",
        "print((a > 100) and (a < 200))\n",
        "print((a > 100) or (a < 200))\n",
        "print((a >= 100) and (a <= 200))\n",
        "print((a >= 100) or (a <= 200))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nGI77iHUD-5x",
        "outputId": "2300d23c-e8df-40d3-c3d8-2cda40fafd87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "True\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2번\n",
        "b = 25\n",
        "(b % 2 == 0) and (b % 5 == 0)"
      ],
      "metadata": {
        "id": "Ao3ZteV4EF7I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#3번\n",
        "c = 1000\n",
        "c / 100\n",
        "c // 100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EmvLHS3vEGdz",
        "outputId": "22648de9-1f4c-4c95-afee-2ecf5b9a203e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 240
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4번\n",
        "# 그리디 알고리즘(욕심쟁이 알고리즘)\n",
        "남은금액 = int(input())\n",
        "\n",
        "오천원 = 남은금액 // 5000\n",
        "# 남은금액 = 남은금액 % 5000\n",
        "남은금액 = 남은금액 - (5000 * 오천원)\n",
        "\n",
        "천원 = 남은금액 // 1000\n",
        "남은금액 = 남은금액 % 1000\n",
        "\n",
        "오백원 = 남은금액 // 500\n",
        "남은금액 = 남은금액 % 500\n",
        "\n",
        "백원 = 남은금액 // 100\n",
        "남은금액 = 남은금액 % 100\n",
        "\n",
        "print(오천원, 천원, 오백원, 백원)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iyH-8ygWEG30",
        "outputId": "86a64894-5d8b-420b-abef-1827e471d3ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8800\n",
            "1 3 1 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 오늘 배운 것 정리\n",
        "\n",
        "1. str\n",
        "    - 순서가 있는 **시퀀스 자료형**입니다.\n",
        "    - 작은 따옴표(' ')나 큰 따옴표(\" \"), 삼중따옴표('''str''', \"\"\"str\"\"\")로 감싸는 것도 가능합니다. (삼중따옴표를 사용할 경우에는 줄단위의 문자열을 나타낼 수 있습니다.)\n",
        "    - 작은 따옴표 안에 큰 따옴표, 큰 따옴표 안에 작은 따옴표 사용이 가능합니다.\n",
        "    - 이스케이프 문자도 사용이 가능합니다.\n",
        "    - 리스트, 튜플도 시퀀스 자료형입니다.\n",
        "    - 메서드\n",
        "        - lower\n",
        "        - index, find\n",
        "        - count\n",
        "        - strip\n",
        "        - replace\n",
        "        - split, join\n",
        "        - isdigit\n",
        "2. 슬라이싱\n",
        "    - 시퀀스형 자료형을 자를 수 있습니다.\n",
        "    - 형태\n",
        "    ```\n",
        "    # s[start:stop:step]\n",
        "    s = 'paullab CEO leehojun'\n",
        "    s[5:]\n",
        "    s[:5]\n",
        "    s[3:10]\n",
        "    s[:]\n",
        "    s[0:20:2]\n",
        "    # 자주 사용되는 코드\n",
        "    s = 'paullab CEO leehojun!'\n",
        "    s[:] # string에서는 많이 사용하지 않지만 list에서 많이 사용합니다.\n",
        "    s[:-1] # 마지막 요소만 제외하고 다 슬라이싱 합니다.\n",
        "    ```\n",
        "\n",
        "3. 형변환\n",
        "    - 형변환 : type을 변경하는 것입니다.\n",
        "    - int, float, str 등 자료형에 이름으로 형태를 변경할 수 있습니다.\n",
        "    - 그 중에서도 bool이 매우 중요합니다.\n",
        "    ```\n",
        "    # 별 5개\n",
        "    # bool 형으로 형변환 하는 것\n",
        "    if True:\n",
        "        print('hi')\n",
        "\n",
        "    if 'hello':\n",
        "        print('hi')\n",
        "\n",
        "    # 정말 많이 사용하는 코드\n",
        "    l = [1, 2, 3]\n",
        "    while l:\n",
        "        print(l.pop())\n",
        "\n",
        "    bool('') # 빈 문자열을 제외하고 모두 True\n",
        "    bool('a')\n",
        "    bool('False') # 문자열 False이기 때문에 True\n",
        "    bool(0) # 0을 제외하고 모두 True\n",
        "    bool(-1)\n",
        "    bool(100)\n",
        "    bool(None) # None은 비어있음을 명시해주는 키워드, False\n",
        "    bool([]) # 컨벤션 자료형은 비어있으면 False입니다.\n",
        "    bool({})\n",
        "    ```\n",
        "\n",
        "4. 산술연산\n",
        "    ```\n",
        "    a = 10\n",
        "    b = 3\n",
        "\n",
        "    print(f'10 + 3 == {a + b}')\n",
        "    print(f'10 - 3 == {a - b}')\n",
        "    print(f'10 / 3 == {a / b}')\n",
        "    print(f'10 // 3 == {a // b}') # 몫만 나옵니다.(정수만요!)\n",
        "    print(f'10 * 3 == {a * b}')\n",
        "    print(f'10 ** 3 == {a ** b}')\n",
        "    print(f'10 % 3 == {a % b}') # 나머지\n",
        "    ```\n",
        "\n",
        "5. 논리연산\n",
        "    ```\n",
        "    # and 는 곱\n",
        "    # or 는 합\n",
        "    # not은 반대\n",
        "    # True 1\n",
        "    # False 0\n",
        "    # 중요한 포인트는 저렇게 했을 때 언제 True가 되는지 정리하는 것\n",
        "\n",
        "    print(True and False)\n",
        "    print(True or False)\n",
        "    print(True or True)\n",
        "\n",
        "    # https://codingdojang.com/scode/350?answer_mode=hide\n",
        "    for i in range(101):\n",
        "        if i % 3 == 0 and i % 5 == 0:\n",
        "            print(i)\n",
        "    ```\n",
        "\n",
        "6. 할당연산\n",
        "    ```\n",
        "    a = 10\n",
        "    a += 10 # a = a + 10\n",
        "    a //= 2\n",
        "    a\n",
        "    ```\n",
        "\n",
        "7. is, in\n",
        "    1. is\n",
        "        ```\n",
        "        a = [1, 2, 3]\n",
        "        b = [1, 2, 3]\n",
        "\n",
        "        id(a), id(b)\n",
        "        a == b # 값이 같은 것과 메모리에 같은 공간에 저장되어 있다는 얘기는 다른 얘기입니다!\n",
        "        ```\n",
        "    2. in\n",
        "        ```\n",
        "        'a' in 'helalo world'\n",
        "        'a' in 'hello world'\n",
        "        'a' in ['a', 'b']\n",
        "        'a' in {'a':10, 'b':20}\n",
        "        # 10 in {'a':10, 'b':20} # dict안에있는 value값이 있는지 확인하고 싶으면\n",
        "        10 in {'a':10, 'b':20}.values()\n",
        "        10 in {10, 20, 30}\n",
        "        ```"
      ],
      "metadata": {
        "id": "T7k7mpDLUggj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!jupyter nbconvert --to markdown a.ipynb"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6yqzPbOgUsuC",
        "outputId": "8eb673bf-9c3d-4ad6-a6ba-f1ec98a49e25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[NbConvertApp] Converting notebook a.ipynb to markdown\n",
            "[NbConvertApp] Writing 47235 bytes to a.md\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ord('가') # 유니코드에서 해당 텍스트 값을 읽어옴, "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iwJXnRvAjkqE",
        "outputId": "0384d9cc-db35-4267-e8cc-43feab018afc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "44032"
            ]
          },
          "metadata": {},
          "execution_count": 250
        }
      ]
    }
  ]
}

함수
코드 덩어리(정말 쉽게 설명하자면..)
코드를 재사용 할 수 있으며, 실수를 줄일 수 있습니다.
코드의 구조를 한 눈에 파악할 수 있습니다.
[ ]
def 부지매입():
    pass

def 설계도면작성():
    pass

def 인력모집():
    pass

def 벽돌쌓기():
    pass

def 지붕올리기():
    pass

# 건축 또는 집짓기?
# 신입사원이 왔을 때
# 3년에 한 번 이직
# 7년에 한 번 이직
# 오래 있으신 분들
부지매입()
설계도면작성()
인력모집()
벽돌쌓기() # 10만줄
벽돌쌓기() # 10만줄
벽돌쌓기() # 10만줄
지붕올리기()
[ ]
# 파선아실(파라미터는 선언할 때, 아규먼트는 실제)
def function(x, y):
    z = x + y
    return z
print(f'function(5, 7) = {function(5, 7)}')
[ ]
# 같은 코드 1
def function(x, y):
    z = x + y
print(f'function(5, 7) = {function(5, 7)}')
function(5, 7) = None
[ ]
# 같은 코드 2
def function(x, y):
    z = x + y
    return None
print(f'function(5, 7) = {function(5, 7)}')
function(5, 7) = None
[ ]
# 같은 코드 3
def function(x, y):
    z = x + y
    return
print(f'function(5, 7) = {function(5, 7)}')
function(5, 7) = None
[ ]
def hello():
    print('1')
    print('2')
    print('3')

print(hello())
[ ]
# 함수 연습문제 1
def one():
    print('one1')
    print('one2')
    print('one3')
    return 100

def two():
    print('two1')
    print('two2')
    one()
    return

print(two())
two1
two2
one1
one2
one3
None
[ ]
# 함수 연습문제 2
def one():
    print('one1')
    print('one2')
    print('one3')
    return 100

def two():
    print('two1')
    print('two2')
    x = one()
    return x + x

print(two())
two1
two2
one1
one2
one3
200
[ ]
# 함수 연습문제 3
def one(a, b):
    print('one1')
    print('one2')
    print('one3')
    return a + b

def two(x):
    y = 100
    print('two1')
    print('two2')
    x = one(x, y)
    return x + x

print(two(10))
two1
two2
one1
one2
one3
220
[ ]
# 함수 연습문제 3
def one(a, b):
    print('one1')
    print('one2')
    print('one3')
    return a + b

def two(x):
    y = 100
    print('two1')
    print('two2')
    x = one(x, y)
    return x + x

print(two(10))
[ ]
# 함수 연습문제 4
def one():
    print('one')
    return 10

def two():
    print('two')
    return 10

def three():
    print('three')
    return 10

a = one()
b = two()
c = three()
print(a + b)
print(a + b + c)
[ ]
# 함수 연습문제 4
def one():
    print('one')
    print('one')
    print('one')
    return 10

def two():
    print('two')
    print('two')
    print('two')
    return 10

def three():
    print('three')
    print('three')
    print('three')
    return 10

a = one()
b = two()
c = three()
print(a + b)
print(a + b + c)
one
one
one
two
two
two
three
three
three
20
30
[ ]
# 함수 연습문제 4
# 좋지 않은 예 입니다!
def one():
    print('one')
    print('one')
    print('one')
    return 10

def two():
    print('two')
    print('two')
    print('two')
    return 10

def three():
    print('three')
    print('three')
    print('three')
    return 10

print(one() + two())
print(one() + two() + three())
one
one
one
two
two
two
20
one
one
one
two
two
two
three
three
three
30
[ ]
# 함수란 무엇일까요?
# 함수의 이름은 메모리 상에 코드 블럭을 가리키는 변수입니다. 
leehojun = print
leehojun('hello') # 소괄호는 그 함수 블록을 실행시키는 명령어가 됩니다.
hello
[ ]
id(leehojun), id(print)
(140462240912688, 140462240912688)
[ ]
l = [leehojun, print, leehojun, print]
leehojun('hello world')
l[0]('hello world')
hello world
hello world
[ ]
def hello(a):
    a('hello')
    a('hello')
    a('hello')

print(hello(print))
hello
hello
hello
None
[ ]
def hello():
    def custom_sum(a, b):
        return a + b
    return custom_sum

c = hello()
c(10, 100)
110
[ ]
def hello(a):
    return a

c = hello(print)
c(10, 100)
10 100
함수의 기본 기능
[ ]
# 파선아실(파라미터는 선언할 때, 아규먼트는 실제)
def function(x, y):
    z = x + y
    return z
print(f'function(5, 7) = {function(5, 7)}')
[ ]
# return을 만나게 되면 함수는 종료가 됩니다.
def function(x, y):
    z = x + y
    return z
    print('hello')
    print('hello')
print(function(5, 7))
12
[ ]
# return을 빨리 만나게 해주세요.
# early return
# 조건이 부합하지 않으면 바로 return을 하도록 하는 코딩 패턴
# 이렇게 작성함으로써, 가독성이 좋은 코드
def custom_sum(x, y):
    if type(x) != int or type(y) != int:
        return '연산할 수 없습니다.'
    z = x + y # 100줄이라 가정
    return z
print(custom_sum(5, '가나다'))
연산할 수 없습니다.
[ ]
# 한글코딩에 장점
# 1. 고유명사(한라산, 새싹멤버) -> 기획자와 소통하기도 좋습니다.
# 2. 알고리즘 가독성은 괜찮습니다. 프로젝트는 조금 힘들 수 있어요. 일부 모듈에서는 사용할 수 있습니다.

# 한글코딩에 단점
# 1. 싫어하시는 분도 많습니다.
# 2. 한영키 바꾸는 것
[ ]
# 함수 안에 함수
def one():
    def two():
        print('hello1')
    def three():
        print('hello2')
    return 100

print(one())
100
[ ]
# 함수 안에 함수
def one():
    def two():
        print('hello1')
    def three():
        print('hello2')
    two()
    three()
    return 100

print(one())
hello1
hello2
100
[ ]
# 함수 안에 함수와 함수 안에 변수는 밖에서 호출이 안됩니다.
# 아래것이 만약 실행되었다면 위 어딘가에서 two와 x가 정의되어 있는 것입니다.
def one():
    def two():
        print('hello1')
    def three():
        print('hello2')
    two()
    three()
    x = 1000
    return 100

one()
# print(x)
# two()
hello1
hello2
100
[ ]
# 함수 안에 함수와 함수 안에 변수를 해봤으니
# 이번에는 함수 밖에 함수와 함수 밖에 변수를 해보도록 하겠습니다.

def test():
    print('test')

def one():
    test()

def two():
    test()

one()
two()
test()
test
test
test
[ ]
# 위 원리와 마찬가지로 밖에 있는 변수를 '가져오는 것만' 가능합니다.
# 수정은 안됩니다.
test = 10

def one():
    print(test)

def two():
    print(test)

one()
two()
10
10
[ ]
# 이렇게 하시면 error가 납니다! 밖에 있는 변수는 수정이 안됩니다.
test = 10

def one():
    test = test + 10

one()
지역 변수와 전역 변수
[ ]
# 전역변수 접근은 가능하지만 수정이 되진 않습니다.
a = 100
def f():
    a = a + 1
f()
[ ]
# 전역변수를 함수 내부에서 수정이 되게 하는 코드입니다.
# 권하지 않습니다.
a = 100
def f():
    global a # 실무에서 사용 안합니다.
    a = a + 1
f()
print(a)
101
[ ]
# 정해진 루트 외에 다른 루트로 해당 값을 수정하려고 하지 마세요.
a = 100
def f(x):
    x = a + 1
    return x
a = f(a)
print(a)
101
[ ]
# 순수 함수
def f(x):
    return x + x + 100
f(10)
f(20) 
# 아규먼트 값에 따라 다르지만 
# 아규먼트에 2배해서 100이 더해진 다는 사실은 변하지 않죠?
140
[ ]
test = 100
def f(x):
    return x + x + 100 + test
f(10)
# 아규먼트 값에 따라 다르지만 
# 아규먼트에 2배해서 200이 더해진 다는 사실은 변하지 않죠?
# 그렇지 않습니다. test값이 다른 곳에서 조작이 되면
# 더해지는 값이 200이 안될 수도 있죠.
# 예측이 불가하게 되는 것!
220
[ ]
# 지역변수와 전역변수 이어서
# 전역변수 : 전역에서 접근할 수 있는 변수
# 지역변수 : 함수 내에서만 접근할 수 있는 변수
[ ]
a = 100
def one():
    a = 10
    print(a)

a=one()
print(a)
10
100
[ ]
# 어려우신 분들은 pass!
# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.
# 자신의 공간에 변수가 선언되어 있지 않으면
# 전역까지 찾아 올라갑니다. 전역에도 없으면 error

a = 100
def one():
    a = 10
    def two():
        def three():
            a = 1000
            print(a)
        three()
        print(a)
    two()
    print(a)

one()
print(a)
1000
10
10
100
[ ]
# 왜 a에서 애러가 나는가?
# enclosing scope에서 변수가 어디에 선언되어 있던 선언된 것은 기억합니다.
# 자유변수가 이를 참고하려 할 때 자신의 선언 뒤에 있다면 애러를 발생하게 됩니다.
a = 100
def one():
    def two():
        def three():
            print(a)
        three()
        print(a)
        a = 10
    two()
    print(a)

one()
print(a)

[ ]
def one():
    x = 1
    def two():
        print(x)
        print(locals())
    print(locals())
    two()
one()
{'two': <function one.<locals>.two at 0x7f5c90303370>, 'x': 1}
1
{'x': 1}
[ ]
a = 100
print(locals())
def one():
    print(locals())
    def two():
        print(locals())
        def three():
            print(locals())
            print(a)
        three()
        print(a)
        a = 10
    two()
    print(a)

one()
print(a)

[ ]
# 함수내에서 사용되는 로컬 변수들의 변수 이름 및 현재 값 등을 알고 싶을 때 
# locals 빌트인 함수를 사용할 수 있습니다.
a = 100
print(locals())
def one():
    a = 10
    print(locals())
    def two():
        print(locals())
        def three():
            print(locals())
            print(a)
        three()
        print(a)
    two()
    print(a)

one()
print(a)
{'__name__': '__main__', '__doc__': 'Automatically created module for IPython interactive environment', '__package__': None, '__loader__': None, '__spec__': None, '__builtin__': <module 'builtins' (built-in)>, '__builtins__': <module 'builtins' (built-in)>, '_ih': ['', "# 함수 안에 함수\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    return 100\n\nprint(one())", "# 함수 안에 함수와 함수 안에 변수는 밖에서 호출이 안됩니다.\n# 아래것이 만약 실행되었다면 위 어딘가에서 two와 x가 정의되어 있는 것입니다.\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    two()\n    three()\n    x = 1000\n    return 100\n\none()\nprint(x)\ntwo()", "# 함수 안에 함수와 함수 안에 변수는 밖에서 호출이 안됩니다.\n# 아래것이 만약 실행되었다면 위 어딘가에서 two와 x가 정의되어 있는 것입니다.\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    two()\n    three()\n    x = 1000\n    return 100\n\none()\n# print(x)\n# two()", '# 정해진 루트 외에 다른 루트로 해당 값을 수정하려고 하지 마세요.\na = 100\ndef f(y):\n    y = a + 1\n    return y\na = f(a)\nprint(a)', '# 정해진 루트 외에 다른 루트로 해당 값을 수정하려고 하지 마세요.\na = 100\ndef f(x):\n    x = a + 1\n    return x\na = f(a)\nprint(a)', 'a = 100\ndef one():\n    a = 10\n    print(a)\n\na=one()\nprint(a)', 'a = 100\ndef one():\n    a = 10\n    print(a)\n    return a\n\na=one()\nprint(a)', 'a = 100\ndef one():\n    a = 10\n    print(a)\n    return a\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            # print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n#     inner()\n#     print(x)\n\n# outer()\n# print(x)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n#     inner()\n#     print(x)\n\n# outer()\n# print(x)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        # print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        global x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\n# outer()\n# print(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        # print(x)\n    inner()\n    print(x)\n\n# outer()\n# print(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            # print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        # three()\n        # print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        # print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        a=5\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 120\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\n# one()\n# print(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\n# print(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 함수내에서 사용되는 로컬 변수들의 변수 이름 및 현재 값 등을 알고 싶을 때 \n# locals 빌트인 함수를 사용할 수 있습니다.\na = 100\nprint(locals())\ndef one():\n    a = 10\n    print(locals())\n    def two():\n        print(locals())\n        def three():\n            print(locals())\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\n# print(a)', '# 함수내에서 사용되는 로컬 변수들의 변수 이름 및 현재 값 등을 알고 싶을 때 \n# locals 빌트인 함수를 사용할 수 있습니다.\n# a = 100\nprint(locals())\ndef one():\n    a = 10\n    print(locals())\n    def two():\n        print(locals())\n        def three():\n            print(locals())\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)'], '_oh': {3: 100}, '_dh': ['/content'], 'In': ['', "# 함수 안에 함수\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    return 100\n\nprint(one())", "# 함수 안에 함수와 함수 안에 변수는 밖에서 호출이 안됩니다.\n# 아래것이 만약 실행되었다면 위 어딘가에서 two와 x가 정의되어 있는 것입니다.\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    two()\n    three()\n    x = 1000\n    return 100\n\none()\nprint(x)\ntwo()", "# 함수 안에 함수와 함수 안에 변수는 밖에서 호출이 안됩니다.\n# 아래것이 만약 실행되었다면 위 어딘가에서 two와 x가 정의되어 있는 것입니다.\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    two()\n    three()\n    x = 1000\n    return 100\n\none()\n# print(x)\n# two()", '# 정해진 루트 외에 다른 루트로 해당 값을 수정하려고 하지 마세요.\na = 100\ndef f(y):\n    y = a + 1\n    return y\na = f(a)\nprint(a)', '# 정해진 루트 외에 다른 루트로 해당 값을 수정하려고 하지 마세요.\na = 100\ndef f(x):\n    x = a + 1\n    return x\na = f(a)\nprint(a)', 'a = 100\ndef one():\n    a = 10\n    print(a)\n\na=one()\nprint(a)', 'a = 100\ndef one():\n    a = 10\n    print(a)\n    return a\n\na=one()\nprint(a)', 'a = 100\ndef one():\n    a = 10\n    print(a)\n    return a\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            # print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n#     inner()\n#     print(x)\n\n# outer()\n# print(x)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n#     inner()\n#     print(x)\n\n# outer()\n# print(x)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        # print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        global x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\n# outer()\n# print(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        # print(x)\n    inner()\n    print(x)\n\n# outer()\n# print(x)', 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            # print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        # three()\n        # print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        # print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        a=5\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 120\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\n# one()\n# print(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\n# print(a)', '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '# 함수내에서 사용되는 로컬 변수들의 변수 이름 및 현재 값 등을 알고 싶을 때 \n# locals 빌트인 함수를 사용할 수 있습니다.\na = 100\nprint(locals())\ndef one():\n    a = 10\n    print(locals())\n    def two():\n        print(locals())\n        def three():\n            print(locals())\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\n# print(a)', '# 함수내에서 사용되는 로컬 변수들의 변수 이름 및 현재 값 등을 알고 싶을 때 \n# locals 빌트인 함수를 사용할 수 있습니다.\n# a = 100\nprint(locals())\ndef one():\n    a = 10\n    print(locals())\n    def two():\n        print(locals())\n        def three():\n            print(locals())\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)'], 'Out': {3: 100}, 'get_ipython': <bound method InteractiveShell.get_ipython of <google.colab._shell.Shell object at 0x7f77689ca6b0>>, 'exit': <IPython.core.autocall.ZMQExitAutocall object at 0x7f77689cac50>, 'quit': <IPython.core.autocall.ZMQExitAutocall object at 0x7f77689cac50>, '_': 100, '__': '', '___': '', '_i': '# 함수내에서 사용되는 로컬 변수들의 변수 이름 및 현재 값 등을 알고 싶을 때 \n# locals 빌트인 함수를 사용할 수 있습니다.\na = 100\nprint(locals())\ndef one():\n    a = 10\n    print(locals())\n    def two():\n        print(locals())\n        def three():\n            print(locals())\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\n# print(a)', '_ii': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_iii': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\n# print(a)', '_i1': "# 함수 안에 함수\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    return 100\n\nprint(one())", 'one': <function one at 0x7f773d0db6d0>, '_i2': "# 함수 안에 함수와 함수 안에 변수는 밖에서 호출이 안됩니다.\n# 아래것이 만약 실행되었다면 위 어딘가에서 two와 x가 정의되어 있는 것입니다.\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    two()\n    three()\n    x = 1000\n    return 100\n\none()\nprint(x)\ntwo()", '_i3': "# 함수 안에 함수와 함수 안에 변수는 밖에서 호출이 안됩니다.\n# 아래것이 만약 실행되었다면 위 어딘가에서 two와 x가 정의되어 있는 것입니다.\ndef one():\n    def two():\n        print('hello1')\n    def three():\n        print('hello2')\n    two()\n    three()\n    x = 1000\n    return 100\n\none()\n# print(x)\n# two()", '_3': 100, '_i4': '# 정해진 루트 외에 다른 루트로 해당 값을 수정하려고 하지 마세요.\na = 100\ndef f(y):\n    y = a + 1\n    return y\na = f(a)\nprint(a)', 'a': 100, 'f': <function f at 0x7f773d0dab90>, '_i5': '# 정해진 루트 외에 다른 루트로 해당 값을 수정하려고 하지 마세요.\na = 100\ndef f(x):\n    x = a + 1\n    return x\na = f(a)\nprint(a)', '_i6': 'a = 100\ndef one():\n    a = 10\n    print(a)\n\na=one()\nprint(a)', '_i7': 'a = 100\ndef one():\n    a = 10\n    print(a)\n    return a\n\na=one()\nprint(a)', '_i8': 'a = 100\ndef one():\n    a = 10\n    print(a)\n    return a\n\none()\nprint(a)', '_i9': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            # print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i10': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i11': '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n#     inner()\n#     print(x)\n\n# outer()\n# print(x)', 'x': 100, 'outer': <function outer at 0x7f773cf33be0>, '_i12': '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n#     inner()\n#     print(x)\n\n# outer()\n# print(x)', '_i13': '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '_i14': '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        # print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '_i15': '# inner가 outer에 변수를 건드리고 싶은데\n# inner 안에서는 x에 수정권한이 전혀 없습니다.\nx = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '_i16': 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        global x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', '_i17': 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', '_i18': 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    # inner()\n    # print(x)\n\nouter()\nprint(x)', '_i19': 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\n# outer()\n# print(x)', '_i20': 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        # print(x)\n    inner()\n    print(x)\n\n# outer()\n# print(x)', '_i21': 'x = 100\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n    print(x)\n\nouter()\nprint(x)', '_i22': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            # print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i23': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        # three()\n        # print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i24': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        # print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i25': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i26': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        a=5\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i27': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i28': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i29': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i30': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 120\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i31': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\n# one()\n# print(a)', '_i32': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\n# a = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\n# print(a)', '_i33': '# 어려우신 분들은 pass!\n# 조금 있다가 요약정리에서도 써드리지 않을 예정입니다.\n# 자신의 공간에 변수가 선언되어 있지 않으면\n# 전역까지 찾아 올라갑니다. 전역에도 없으면 error\n\na = 100\ndef one():\n    a = 10\n    def two():\n        def three():\n            a = 1000\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)', '_i34': '# 함수내에서 사용되는 로컬 변수들의 변수 이름 및 현재 값 등을 알고 싶을 때 \n# locals 빌트인 함수를 사용할 수 있습니다.\na = 100\nprint(locals())\ndef one():\n    a = 10\n    print(locals())\n    def two():\n        print(locals())\n        def three():\n            print(locals())\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\n# print(a)', '_i35': '# 함수내에서 사용되는 로컬 변수들의 변수 이름 및 현재 값 등을 알고 싶을 때 \n# locals 빌트인 함수를 사용할 수 있습니다.\n# a = 100\nprint(locals())\ndef one():\n    a = 10\n    print(locals())\n    def two():\n        print(locals())\n        def three():\n            print(locals())\n            print(a)\n        three()\n        print(a)\n    two()\n    print(a)\n\none()\nprint(a)'}
{'a': 10}
{'a': 10}
{'a': 10}
10
10
10
100
[ ]
# error가 나는 코드
x = 100
def outer():
    x = 1
    def inner():
        x += 1
        print(x)
    inner()
    print(x)

outer()
print(x)
[ ]
# inner가 outer에 변수를 건드리고 싶은데
# inner 안에서는 x에 수정권한이 전혀 없습니다.
x = 100
def outer():
    x = 1
    def inner():
        nonlocal x
        x += 1
        print(x)
    inner()

2
2
100
[ ]
x = 100
def outer():
    x = 1
    def inner():
        nonlocal x
        x += 1
        print(x)
    inner()
    print(x)

outer()
print(x)
2
2
100
재귀함수
내가 나를 호출하는 것입니다.
재귀 <-> for문은 대부분 호환이 가능합니다.
반복문 사용하시기를 권합니다!
어렵고 효율도 안좋아요! (얼마나 효율이 안좋은지도 확인해보겠습니다.)
필수적으로 사용하는 곳이 있습니다.
[ ]
# sys.setrecursionlimit -> 제한을 늘릴 수 있음
# 실행시키지 마세요.
def 숫자출력():
    print(1)
    return 숫자출력()
숫자출력()
[ ]
# for로 펙토리얼
# 5! = 5 * 4 * 3 * 2 * 1

result = 1

# 1 * 2 * 3 * 4 * 5
for i in range(1, 6):
    result *= i
    
result
120
[ ]
# 재귀로 펙토리얼

def f(n):
    if n <= 1:
        return 1
    else:
        return n * f(n-1)

f(5)

'''
f(5)    5 * f(4) == 5 * 24 => 120
f(4)    4 * f(3) == 4 * 6
f(3)    3 * f(2) == 3 * 2
f(2)    2 * f(1) == 2 * 1
f(1)    1
'''
120
[ ]
# for로 문자열 거꾸로 출력하기
s = 'hello'
result = ''

for i in s:
    result = i + result

result
'''
result = 'h' + ''
result = 'e' + 'h'
result = 'l' + 'eh'
result = 'l' + 'leh'
result = 'o' + 'lleh'
'''
# 실무에서는 이렇게 거꾸로 만들지 않습니다.
# 슬라이싱이 일반 for문보다 8배 빠릅니다.
# s[::-1] 이렇게 쓰시면 됩니다.

[ ]
def reverse(s):
    if len(s) == 1:
        return s
    else:
        return reverse(s[1:]) + s[0]

reverse('hello')

'''
reverse('hello')    reverse('ello') + 'h'   == 'olle' + 'h'
reverse('ello')     reverse('llo') + 'e'    == 'oll' + 'e'
reverse('llo')      reverse('lo') + 'l'     == 'ol' + 'l'
reverse('lo')       reverse('o') + 'l'      == 'o' + 'l'
reverse('o')        'o'
'''

[ ]
# 피보나치 for
# 재귀가 얼마나 비효율적인지 보여드리기 위해서 진행
# 1 1 2 3 5 8 13 21

curr = 1
next = 1
for i in range(1, 6):
    curr, next = next, curr + next

next
13
[ ]
# 피보나치 재귀

def f(n):
    if n == 1 or n == 2:
        return 1
    return f(n-1) + f(n-2)

1, 1, f(3), f(4), f(5), f(6)
(1, 1, 2, 3, 5, 8)
[ ]
f(35) #8초
24157817
[ ]
# 재귀에 비효율을 이렇게 해결할 수는 있다를 보여드리기 위함
# but 가능 하면 for를 이용해주세요.
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(num):
    if num == 0:
        return 0
    if num == 1 or num == 2:
        return 1

!! 연습문제
[ ]
# 1번
a = 'pithon'

def 함수1():
    def 함수2():
        print('love')
        
    print('I')
    함수2()
    return "python"
    

a = 함수1()
print(a)
I
love
python
[ ]
# 2번
def plus(num1, num2):
    return num1 + num2

def minus(num1, num2):
    return num1 - num2

def multiply(num1, num2):
    return num1 * num2

def divide(num1, num2):
    return num1 / num2

print(f'plus : {plus(10, 5)}')
print(f'minus : {minus(10, 5)}')
print(f'multiply : {multiply(10, 5)}')
print(f'divide : {divide(10, 5)}')
plus : 15
minus : 5
multiply : 50
divide : 2.0
[ ]
plus = lambda num1, num2 : num1 + num2
minus = lambda num1, num2 : num1 - num2
multiply = lambda num1, num2 : num1 / num2
divide = lambda num1, num2 : num1 * num2

print(f'plus : {plus(10, 5)}')
print(f'minus : {minus(10, 5)}')
print(f'multiply : {multiply(10, 5)}')
print(f'divide : {divide(10, 5)}')
plus : 15
minus : 5
multiply : 2.0
divide : 50
[ ]
# 실력이 있으신 분은 견고한 코드가 될 수 있도록 해주셔야 합니다.
def plus(num1, num2):
    if type(num1) == int and type(num2) == int:
        return num1 + num2
    return '정수가 아니기에 연산할 수 없습니다.'

# 테스트 주도 개발
print(f"plus : {plus(10, 5)}")
print(f"plus : {plus(10, '5')}")
print(f"plus : {plus('10', 5)}")
print(f"plus : {plus('10', '5')}")
print(f"plus : {plus(10, 'a')}")
print(f"plus : {plus(10, True)}")
print(f"plus : {plus(False, 5)}")
print(f"plus : {plus(10, 10.1)}")
plus : 15
plus : 정수가 아니기에 연산할 수 없습니다.
plus : 정수가 아니기에 연산할 수 없습니다.
plus : 정수가 아니기에 연산할 수 없습니다.
plus : 정수가 아니기에 연산할 수 없습니다.
plus : 정수가 아니기에 연산할 수 없습니다.
plus : 정수가 아니기에 연산할 수 없습니다.
plus : 정수가 아니기에 연산할 수 없습니다.
[ ]
# 실력이 있으신 분은 견고한 코드가 될 수 있도록 해주셔야 합니다.
def plus(num1, num2):
    if type(num1) == int and type(num2) == int:
        return num1 + num2
    return float('inf')

# 테스트 주도 개발
print(f"plus : {plus(10, 5)}")
print(f"plus : {plus(10, '5')}")
print(f"plus : {plus('10', 5)}")
print(f"plus : {plus('10', '5')}")
print(f"plus : {plus(10, 'a')}")
print(f"plus : {plus(10, True)}")
print(f"plus : {plus(False, 5)}")
print(f"plus : {plus(10, 10.1)}")
[ ]
# 실력이 있으신 분은 견고한 코드가 될 수 있도록 해주셔야 합니다.
def plus(num1, num2):
    try:
        return num1 + num2
    except:
        return float('inf')

# 테스트 주도 개발
print(f"plus : {plus(10, 5)}")
print(f"plus : {plus(10, '5')}")
print(f"plus : {plus('10', 5)}")
print(f"plus : {plus('10', '5')}")
print(f"plus : {plus(10, 'a')}")
print(f"plus : {plus(10, True)}")
print(f"plus : {plus(False, 5)}")
print(f"plus : {plus(10, 10.1)}")
plus : 15
plus : inf
plus : inf
plus : 105
plus : inf
plus : 11
plus : 5
plus : 20.1
[ ]
float('inf') > 1000000000000000000000000
True
[ ]
x = 3
def 제곱(n):
    if n == 0:
        return 1
    return x * 제곱(n-1)

제곱(3)
제곱(4)
24
[ ]
def 제곱(x, n):
    if n == 0:
        return 1
    return x * 제곱(x, n-1)

제곱(3, 3)
제곱(3, 4)
81
[ ]
# 재귀를 Log(N, 2)
def my_pow(num1, num2):
    if num2 == 0:
        return 1
    if num2 == 1:
        return num1
    if num2 % 2 == 0:
        half = my_pow(num1, num2 // 2)
        return half * half
    else:
        half = my_pow(num1, num2 // 2)
        return half * half * num1

my_pow(2, 3)
8
20230503_174132.jpg

[ ]
# 재귀함수를 사용해서 푼 것은 아니고
# 팩토리 함수라고도 하고, 클로져라고도 합니다.
def 제곱(x):
    def 승수(y):
        return x ** y
    return 승수

제곱3 = 제곱(3)
제곱3(4)
81
list (리스트)
순서를 가진 데이터들의 집합(Sequence)
리스트는 값의 변경
리스트 안에 리스트로 다차원의 리스트를 만드는 것도 가능
리스트 안에 다른 딕셔너리, 셋, 튜플 등을 넣는 것도 가능합니다
[ ]
l = [1000, 2000, 3000, 1000, 2000, 3000]
id(l[0]), id(l[3])
(140027035575536, 140027035575536)
[ ]
# 컨벤션 자료형(딕셔너리, 튜플, 셋, 리스트)에서는
# 메모리 효율을 위해
# 같은 값이 있을 경우 같은 곳을 가리키게 설계되어 있습니다.
[ ]
l = [10, 20, 30, 40]
l[0] = 1000
l
[1000, 20, 30, 40]
[ ]
s = 'hello world'
s[0] = 'k' # error
s
[ ]
data = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]]

data
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
[ ]
data[0]
[1, 2, 3]
[ ]
data[0][0]
[1, 2, 3][0]
1
[ ]
data = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]]

data[0][0] *= 2
data[0][1] *= 2
data[0][2] *= 2
data[1][0] *= 2
data[1][1] *= 2
data[1][2] *= 2
data[2][0] *= 2
data[2][1] *= 2
data[2][2] *= 2
data
[[2, 4, 6], [8, 10, 12], [14, 16, 18]]
[ ]
data = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]]

for i in range(3):
    data[i][0] *= 2
    data[i][1] *= 2
    data[i][2] *= 2

data
[ ]
data = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]]

for i in range(3):
    for j in range(3):
        data[i][j] *= 2
        
data
[[2, 4, 6], [8, 10, 12], [14, 16, 18]]
[ ]
'''
3                       == 스칼라
[3, 4]                  == 벡터
[[1, 2, 3],             == 메트릭스(행렬)
 [4, 5, 6],
 [7, 8, 9]]
[[[1], [2], [3]],       == 텐서(다차원, 3차원 이상)
 [[4], [5], [6]],
 [[7], [8], [9]]]


[ ]
# 리스트에서 주의해야 하는 연산!
x = [10] * 3
x
[10, 10, 10]
[ ]
x[0] = 100
x
[100, 10, 10]
[ ]
x = [[10] * 2] * 3
x
[[10, 10], [10, 10], [10, 10]]
[ ]
x[0][0] = 100
x
[[100, 10], [100, 10], [100, 10]]
[ ]
x = [[[10] * 3] * 3] * 4
x[0][0][0] = 1000
x
[[[1000, 10, 10], [1000, 10, 10], [1000, 10, 10]],
 [[1000, 10, 10], [1000, 10, 10], [1000, 10, 10]],
 [[1000, 10, 10], [1000, 10, 10], [1000, 10, 10]],
 [[1000, 10, 10], [1000, 10, 10], [1000, 10, 10]]]
[ ]
[1, 2, 3] + [1, 2, 3] # 많이 사용합니다!
[1, 2, 3, 1, 2, 3]
[ ]
[1, 2, 3] + 1 # error
[ ]
id(x[0][0]), id(x[0][1])
(140027034041600, 140027034041600)
[ ]
id(x[0][0]) == id(x[0][1])
True
[ ]
l = [10, 20, 30]
type(l), dir(l), help(l)
Help on list object:

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(self, /)
 |      Return a reverse iterator over the list.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(self, /)
 |      Return the size of the list in memory, in bytes.
 |  
 |  append(self, object, /)
 |      Append object to the end of the list.
 |  
 |  clear(self, /)
 |      Remove all items from list.
 |  
 |  copy(self, /)
 |      Return a shallow copy of the list.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  extend(self, iterable, /)
 |      Extend list by appending elements from the iterable.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  insert(self, index, object, /)
 |      Insert object before index.
 |  
 |  pop(self, index=-1, /)
 |      Remove and return item at index (default last).
 |      
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(self, value, /)
 |      Remove first occurrence of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(self, /)
 |      Reverse *IN PLACE*.
 |  
 |  sort(self, /, *, key=None, reverse=False)
 |      Sort the list in ascending order and return None.
 |      
 |      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
 |      order of two equal elements is maintained).
 |      
 |      If a key function is given, apply it once to each list item and sort them,
 |      ascending or descending, according to their function values.
 |      
 |      The reverse flag can be set to sort in descending order.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

(list,
 ['__add__',
  '__class__',
  '__class_getitem__',
  '__contains__',
  '__delattr__',
  '__delitem__',
  '__dir__',
  '__doc__',
  '__eq__',
  '__format__',
  '__ge__',
  '__getattribute__',
  '__getitem__',
  '__gt__',
  '__hash__',
  '__iadd__',
  '__imul__',
  '__init__',
  '__init_subclass__',
  '__iter__',
  '__le__',
  '__len__',
  '__lt__',
  '__mul__',
  '__ne__',
  '__new__',
  '__reduce__',
  '__reduce_ex__',
  '__repr__',
  '__reversed__',
  '__rmul__',
  '__setattr__',
  '__setitem__',
  '__sizeof__',
  '__str__',
  '__subclasshook__',
  'append',
  'clear',
  'copy',
  'count',
  'extend',
  'index',
  'insert',
  'pop',
  'remove',
  'reverse',
  'sort'],
 None)
리스트의 메서드
[ ]
# 'append', 'clear', 'copy', 'count', 'extend', 'index', 
# 'insert', 'pop', 'remove', 'reverse', 'sort'
[ ]
l = [1, 2, 3]
l.append(4)
l
[1, 2, 3, 4]
[ ]
l = [1, 2, 3]
l.append([1, 2, 3])
l
[1, 2, 3, [1, 2, 3]]
[ ]
l = [1, 2, 3]
l.extend(4) #error
l
[ ]
l = [1, 2, 3]
l.extend('hello')
l
[1, 2, 3, 'h', 'e', 'l', 'l', 'o']
[ ]
l = [1, 2, 3]
l.extend({'one':10, 'two':20})
l
[1, 2, 3, 'one', 'two']
[ ]
l = [1, 2, 3]
l.extend({10, 20, 30})
l
[1, 2, 3, 10, 20, 30]
[ ]
l = [1, 2, 3]
l.extend([1, 2, 3])
l
[1, 2, 3, 1, 2, 3]
[ ]
l = [10, 20, 30]
l.clear()
l
[]
[ ]
l = [10, 20, 30]
l = []
l
[]
[ ]
제주과일가게 = [['바나나', 1000], ['수박', 2000], ['딸기', 3000]]
서울과일가게 = 제주과일가게
서울과일가게[0] = ['바나나', 2000]
서울과일가게, 제주과일가게
([['바나나', 2000], ['수박', 2000], ['딸기', 3000]],
 [['바나나', 2000], ['수박', 2000], ['딸기', 3000]])
[ ]
제주과일가게 = [['바나나', 1000], ['수박', 2000], ['딸기', 3000]]
서울과일가게 = 제주과일가게.copy() # 얕은 복사
서울과일가게[0] = ['바나나', 2000]
서울과일가게, 제주과일가게
([['바나나', 2000], ['수박', 2000], ['딸기', 3000]],
 [['바나나', 1000], ['수박', 2000], ['딸기', 3000]])
[ ]
제주과일가게 = [['바나나', 1000], ['수박', 2000], ['딸기', 3000]]
서울과일가게 = 제주과일가게[:] # 얕은 복사
서울과일가게[0] = ['바나나', 2000]
서울과일가게, 제주과일가게
([['바나나', 2000], ['수박', 2000], ['딸기', 3000]],
 [['바나나', 1000], ['수박', 2000], ['딸기', 3000]])
[ ]
s = 'hello world'
s[:5]

[ ]
l = [10, 20, 30, 40, 50]
l[:3]
ll = l[:]
ll
[10, 20, 30, 40, 50]
[ ]
id(l), id(ll)
(140027035736448, 140027034219968)
[ ]
# 이 이상의 내용은 뒤에 얕은 복사와 깊은 복사에서 알아봅니다.
제주과일가게 = [['바나나', 1000], ['수박', 2000], ['딸기', 3000]]
# 서울과일가게 = 제주과일가게[:] # 얕은 복사
서울과일가게 = 제주과일가게.copy() # 얕은 복사
id(서울과일가게[0]), id(제주과일가게[0])
id(서울과일가게[0][0]), id(제주과일가게[0][0])
서울과일가게[0][1] = 3000
서울과일가게, 제주과일가게
([['바나나', 3000], ['수박', 2000], ['딸기', 3000]],
 [['바나나', 3000], ['수박', 2000], ['딸기', 3000]])
[ ]
l = [1, 2, 3]
ll = l[:]
l[0] = 1000
l, ll
([1000, 2, 3], [1, 2, 3])
[ ]
l = [1, 2, 3]
ll = l.copy()
l[0] = 1000
l, ll
[ ]
l = [1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 1, 1]
l.count(1)
6
[ ]
a = [10, 1, 1, 11, 2, 23, 12, 11]
a.index(11)
a[:a.index(11)]
[10, 1, 1]
[ ]
a = [10, 20, 30]
a.insert(2, 1000) # insert는 값을 지우지는 않습니다.
a
[10, 20, 1000, 30]
[ ]
l = [10, 20, 30, 40, 50]
l.pop()
50
[ ]
l
[10, 20, 30, 40]
[ ]
l = [10, 20, 30, 40, 50]
l.pop(0) # 많이 사용합니다.
l
[20, 30, 40, 50]
[ ]
# append : 맨 뒤에 추가
# pop : 맨 뒤에서 값을 뽑아내고, index가 들어갈 경우 index에서 뽑습니다.
# insert : index에 값을 삽입하고 원래 있던 값을 뒤로 밀어버립니다.
[ ]
l = [10, 20, 30, 40, 50]
l.remove(20) # 예를 들어 for를 돌면서 remove를 하지 않기 바랍니다.
l
[10, 30, 40, 50]
[ ]
#실무에서 어떤 값을 전부 없애거나, 특정 값을 전부 찾는 것 
def f(x):
    return x !=20
#True 인 것만 반환해줌 
list(filter(f, [10, 20, 30, 40, 50, 20, 20, 20]))
[10, 30, 40, 50]
[ ]
for i in filter(f, [10, 20, 30, 40, 50, 20, 20, 20]):
    print(i)
10
30
40
50
[ ]
list(filter(lambda x:x!=20, [10, 20, 30, 40, 50, 20, 20, 20]))
[10, 30, 40, 50]
[ ]
l = [20, 20, 20, 20]
for i in range(len(l)):
    print(len(l)) # len가 계속 변하기 때문에 의도치 않은 에러가 날 수 있어요.
    l.remove(20)
4
3
2
1
[ ]
# 무한 반복입니다.
l = [20, 20, 20, 20]
for i in l:
    print(len(l))
    l.append(20)
[ ]
l = [5, 6, 4, 3, 8, 9, 1]
l.reverse() # 역 정렬이 아니고 역순이며 원본을 만집니다.
l
[1, 9, 8, 3, 4, 6, 5]
[ ]
l = [5, 6, 4, 3, 8, 9, 1]
print(list(reversed(l))) # 역 정렬이 아니고 역순이며 원본을 만지지 않습니다.
print(l)
[1, 9, 8, 3, 4, 6, 5]
[5, 6, 4, 3, 8, 9, 1]
[ ]
# l.reverse() : 리스트에 메서드 이며, return None입니다! 원본이 역순, 원본을 만집니다.
# reversed() : 빌트인펑션이며, return 역순 입니다! 원본을 만지지 않습니다.
[ ]
l = [5, 6, 4, 3, 8, 9, 1]
print(l.reverse())
l
None
[1, 9, 8, 3, 4, 6, 5]
[ ]
l = [5, 6, 4, 3, 8, 9, 1]
print(list(reversed(l)))
print(l)
[1, 9, 8, 3, 4, 6, 5]
[5, 6, 4, 3, 8, 9, 1]
[ ]
reversed(l)
<list_reverseiterator at 0x7f5c90498880>
[ ]
print(type(range(10)))
<class 'range'>
sort (별 여섯 개)
[ ]
l = [1,2,3,4,5,6,7,10,5,6]
l.sort() # 원본을 만짐, 반환값은 None
l

[1, 2, 3, 4, 5, 5, 6, 6, 7, 10]
[ ]
l=[1,2,3,4,5,6,7,10,5,6]
sorted([1,2,3,4,5,6,7,10,5,6]) #원본을 만지지 않고, 반환값은 정렬된 값
[1, 2, 3, 4, 5, 5, 6, 6, 7, 10]
[ ]
#이렇게 실문에선 사용하지 않음
l=[1,2,3,4,5,6,7,10,5,6]
l.sort()
l.reverse()
l
[10, 7, 6, 6, 5, 5, 4, 3, 2, 1]
[ ]
l=[1,2,3,4,5,6,7,10,5,6]
l.sort(reverse=True)
l
[10, 7, 6, 6, 5, 5, 4, 3, 2, 1]
[ ]
l=[1,2,3,4,5,6,7,10,5,6]
sorted(l, reverse=True) #내림차순
[10, 7, 6, 6, 5, 5, 4, 3, 2, 1]
[ ]
l=[1,2,3,4,5,6,7,10,5,6]
sorted(l, reverse=False)
[1, 2, 3, 4, 5, 5, 6, 6, 7, 10]
[ ]
l=[1,2,3,4,5,6,7,10,5,6]
sorted(l)
[1, 2, 3, 4, 5, 5, 6, 6, 7, 10]
[ ]
# 그냥 암기하세요!!!!!!!!
# 가장 짧은 것 가장 높은 것과 같은 것이 나오면 sort사용

l = [[1, 10, 'leehojun'], 
     [20, 30, 'hojun'], 
     [10, 20, 'weniv!'], 
     [1, 2, 'hello world'], 
     [55, 11, 'sun']]

# 1. 글자 수 대로 정렬해주세요.

#정렬은 sort를 사용하세요
def f(x):
    return len(x[2])

print(sorted(l, key=f, reverse=False))
print(sorted(l, key=lambda x:len(x[2]), reverse=False))

# 2. 맨 앞에 위치한 숫자대로 정렬해주세요.
def f2(x):
    return x[0]
print(sorted(l))
print(sorted(l, key=f2))
print(sorted(l, key=lambda x:x[0]))
#위의 세 개가 결과가 앞의 숫자대로 정렬됨

# 3. 중앙에 위치한 값대로 정렬해주세요.
def f2(x):
    return x[1]
print(sorted(l))
print(sorted(l, key=f2))
print(sorted(l, key=lambda x:x[1]))

l = [[1, 10, 32], 
     [20, 30, 11], 
     [10, 20, 22], 
     [1, 2, 13], 
     [55, 11, 44]]


# 4. 3개의 전체 합이 작은 순서대로 출력해주세요.
# def f4(x):
#     return sum(x[0]+x[1]+x[2])

def f4(x):
    return sum(x)

print(sorted(l))
print(sorted(l, key=f4))
print(sorted(l, key=lambda x:sum(x)))
print(sorted(l, key=sum))

[[55, 11, 'sun'], [20, 30, 'hojun'], [10, 20, 'weniv!'], [1, 10, 'leehojun'], [1, 2, 'hello world']]
[[55, 11, 'sun'], [20, 30, 'hojun'], [10, 20, 'weniv!'], [1, 10, 'leehojun'], [1, 2, 'hello world']]
[[1, 2, 'hello world'], [1, 10, 'leehojun'], [10, 20, 'weniv!'], [20, 30, 'hojun'], [55, 11, 'sun']]
[[1, 10, 'leehojun'], [1, 2, 'hello world'], [10, 20, 'weniv!'], [20, 30, 'hojun'], [55, 11, 'sun']]
[[1, 10, 'leehojun'], [1, 2, 'hello world'], [10, 20, 'weniv!'], [20, 30, 'hojun'], [55, 11, 'sun']]
[[1, 2, 'hello world'], [1, 10, 'leehojun'], [10, 20, 'weniv!'], [20, 30, 'hojun'], [55, 11, 'sun']]
[[1, 2, 'hello world'], [1, 10, 'leehojun'], [55, 11, 'sun'], [10, 20, 'weniv!'], [20, 30, 'hojun']]
[[1, 2, 'hello world'], [1, 10, 'leehojun'], [55, 11, 'sun'], [10, 20, 'weniv!'], [20, 30, 'hojun']]
[[1, 2, 13], [1, 10, 32], [10, 20, 22], [20, 30, 11], [55, 11, 44]]
[[1, 2, 13], [1, 10, 32], [10, 20, 22], [20, 30, 11], [55, 11, 44]]
[[1, 2, 13], [1, 10, 32], [10, 20, 22], [20, 30, 11], [55, 11, 44]]
[ ]
# 코딩도장 sort 문제: https://codingdojang.com/scode/408?
# 좌표 평면 문제가 나오면 차원 숙소나 차원 확대가 가능한 문제인지 확인 
# 문제 : 1차원의 점들이 주어졌을 때, 그 중 가장 거리가 짧은 것의 쌍을 출력하는 함수를 작성하시오. 
#(단 점들의 배열은 모두 정렬되어있다고 가정한다.)

#예를들어 S={1, 3, 4, 8, 13, 17, 20} 이 주어졌다면, 결과값은 (3, 4)가 될 것이다.

point=[1,3,4,8,13,17,20]
point[1:]

[1,3,4,8,13,17,20]
[3, 4, 8, 13, 17, 20]
[3, 4, 8, 13, 17, 20]
[ ]
# zip
list(zip('hello','world')) #built-in function
[('h', 'w'), ('e', 'o'), ('l', 'r'), ('l', 'l'), ('o', 'd')]
[ ]
list(zip(point,point[1:]))
[(1, 3), (3, 4), (4, 8), (8, 13), (13, 17), (17, 20)]
[ ]
def f(x):
    return x[1]-x[0]
sorted(zip(point,point[1:]), key=f)
[(3, 4), (1, 3), (17, 20), (4, 8), (13, 17), (8, 13)]
[ ]
def f(x):
    return x[1]-x[0]
sorted(zip(point,point[1:]), key=f)[0]

(3, 4)
[ ]
sorted(zip(point,point[1:]), key=lambda x:x[1]-x[0])[0]
[ ]
#응급도
#[3,76,24]
#우선순위
#[3,1,2]

l=[3,76,24]
정렬된값 = sorted(l, reverse=True)
정렬된값 #[76,24,3]

결과값 = [정렬된값.index(l[0]),
       정렬된값.index(l[1]),
       정렬된값.index(l[2])]
결과값
[2, 0, 1]
[ ]
#sorted 도 얕은 복사!!
l=[[1,2],[3,4],[5,6]]
ll=sorted(l, reverse=True)
l,ll

([[1, 2], [3, 4], [5, 6]], [[5, 6], [3, 4], [1, 2]])
오늘 배운 것 정리
!! 오늘 배운 것 정리
함수

코드 덩어리(정말 쉽게 설명하면)

코드를 재사용 할 수 있으며, 실수를 줄일 수 있습니다.

코드의 구조를 한 눈에 파악할 수 있습니다.

형태

 # 파선아실(파라미터는 선언할 때, 아규먼트는 실제)
 def function(x, y):
     z = x + y
     return z
 print(f'function(5, 7) = {function(5, 7)}')
함수 안에 함수와 함수 안에 변수는 밖에서 접근이 불가합니다.

지역 변수와 전역 변수

전역변수 : 전역에서 접근할 수 있는 변수
지역변수 : 함수 내에서만 접근할 수 있는 변수
# 전역변수는 각 함수에서 접근은 가능하지만 수정이 되진 않습니다.
# only read
# global이라는 키워드로 밖에 있는 변수를 수정할 수도 있지만 권하지 않습니다.
# 권하지 않기에 요약자료에도 없습니다.
a = 100
def f():
  a = a + 1
f()
재귀함수

내가 나를 호출하는 것입니다.

재귀 <-> for문은 대부분 호환이 가능합니다.

반복문 사용하시기를 권합니다!

어렵고 효율도 안좋아요! (얼마나 효율이 안좋은지도 확인해보겠습니다.)

필수적으로 사용하는 곳이 있습니다.

def f(n):
  if n <= 1:
      return 1
  else:
      return n * f(n-1)

f(5)
list (리스트)

순서를 가진 데이터들의 집합(Sequence)

리스트는 값의 변경

리스트 안에 리스트로 다차원의 리스트를 만드는 것도 가능

리스트 안에 다른 딕셔너리, 셋, 튜플 등을 넣는 것도 가능합니다

l = [10, 20, 30, 40]
print(l[0]) # 순서로 값 호출
l[0] = 1000 # 값의 변경 가능
print(l)

data = [[1, 2, 3], # 다차원 배열
  [4, 5, 6],
  [7, 8, 9]]

print(data)
리스트 메서드

append : 맨 뒤에 값 추가
clear : 모든 값 지우기
copy : 얕은 복사
count : 갯수 세기
extend : 확장하기(뒤에 순회 가능한 객체가 들어오면 순차적으로 추가)
index : 위치 찾기
insert : 삽입하기
pop: 맨 뒤에서 값 꺼내기(index가 들어오면 index에서 값 꺼냄)
remove : 값 지우기
reverse : 역순
sort : 정렬
깊은 복사와 얕은 복사
[ ]
#아무런 복사도 이뤄지지 않은 상태
l=[[1,2,3],[4,5,6]]
ll=l
ll[0][0]=10
l,ll
([[10, 2, 3], [4, 5, 6]], [[10, 2, 3], [4, 5, 6]])
[ ]
#얕은 복사 
l=[1000,2000,3000,4000,5000,6000]
ll=l.copy()
ll[0]=10
l,ll
([1, 2, 3, 4, 5, 6], [10, 2, 3, 4, 5, 6])
[ ]
l=[1000,200,300,1000,1000,1000] #메모리를 아끼기 위해서 1000이 가리키는 메모리 값이 같은 것이다.
[ ]
#얕은 복사 
l=[1000,2000,3000,4000,5000,6000]
ll=l.copy()
id(l[0]), id(ll[0]) #같은 값이 나오니깐 같은 객체를 가리키고 있다? 놉
(139838071926672, 139838071926672)
[ ]
#얕은 복사 
l=[[1,2,3],[4,5,6]]
ll=l.copy()
ll[0][0]=10
l,ll
([[10, 2, 3], [4, 5, 6]], [[10, 2, 3], [4, 5, 6]])
[ ]
id(l[0]), id(ll[0])
(139838071926672, 139838071926672)
[ ]
#얕은 복사 
l=[[1,2,3],[4,5,6]]
ll=l.copy()
ll[0]=100
l,ll

#list가 가르키는 뎁스와 0번째가 가르키는 뎁스는 다르다.
([[1, 2, 3], [4, 5, 6]], [100, [4, 5, 6]])
[ ]
#얕은 복사는 한 덱스[]만 카피하고 깊은 복사는 다 카피한다
[ ]
#깊은 복사
import copy

l=[[1,2,3],[4,5,6]]
ll=copy.deepcopy(l)
ll[0][0]=10
l,ll
([[1, 2, 3], [4, 5, 6]], [[10, 2, 3], [4, 5, 6]])
[ ]
id(l), id(ll)
(139838069567424, 139838071177472)
[ ]
id(l[0]), id(ll[0])
id(l[0][0]), id(ll[0][0])
(139839319326960, 139839319327248)
[ ]
l=[[1,2,[1, [999, 998]]],[4,5,[2, [333,332]]]]
ll=copy.deepcopy(l)
ll[0][2][1][0]=10
l, ll
([[1, 2, [1, [999, 998]]], [4, 5, [2, [333, 332]]]],
 [[1, 2, [1, [10, 998]]], [4, 5, [2, [333, 332]]]])
얕은 복사는 1계층만 복사 합니다. []
깊은 복사는 n계층까지 모두 복사합니다.
[ ]
#얕은복사
l=[[1,2,3],[4,5,6]]
ll=l[:]
l[0]=100
l,ll
([100, [4, 5, 6]], [[1, 2, 3], [4, 5, 6]])
[ ]
#얕은복사
l=[[1,2,3],[4,5,6]]
ll=l[:] #l.copy써도 마찬가지
l[0][0]=100
l,ll
([[100, 2, 3], [4, 5, 6]], [[100, 2, 3], [4, 5, 6]])
[ ]
#얕은복사
#list comprehension 안 배운 내용이니 keep해두세요
#for문 배운다음 다시 오셔서 복습하시길 바랍니다.
l=[[1,2,3],[4,5,6]]
ll=[for i in l] #얕은복사
l[0][0]=100
l,ll
[ ]
#1단계 깊은복사
#list comprehension 안 배운 내용이니 keep해두세요
#for문 배운다음 다시 오셔서 복습하시길 바랍니다.
l=[[1,2,3],[4,5,6]]
ll=[i[:] for i in l] #얕은복사
l[0][0]=100
l,ll
다차원 리스트
[ ]
# jun 만 뽑아주세요.
a = [[1, 2, 3],
     [11, 22, 33],
     ['leehojun', 20, 30]]

a[2][0][5:] #혹은[-3:]

# a=a[2]
# a=a[0]
# a=a[5:]
# a

list 에서 built-in function을 활용
알아야하는 built-in function
A
abs()
all()
any()
B bin() bool()

C chr()

D dict() dir()

E enumerate() eval()

F filter() float()

G globals()

H help() hex()

I id() input() int() isinstance() issubclass() iter()

L len() list() locals()

M map() max() min()

N next()

O object() oct() open() ord()

P pow() print() property()

R range() repr() reversed() round()

S set() setattr() slice() sorted() staticmethod() str() sum() super()

T tuple() type()

V vars()

Z zip() ```

[ ]
#built-in function: https://docs.python.org/3/library/functions.html


[ ]
a = [1, 2, 3, 4, 5, 6, 7, 8]
print(max(a)) #최댓값
print(min(a)) #최솟값
print(sum(a)) #전체값의 합
8
1
36
[ ]
#2차원
a = [[1, 2, 3],
     [11, 22, 33],
     [10, 2000, 30]]
max(a, key=lambda x:x[1])
min(a, key=lambda x:x[1])
# sum(a) error
sum(a, [])
[ ]
a = [[1, 2, 3,'a'],
     [11, 22, 33,'aaa'],
     [10, 2000, 30,'aa']]
max(a, key=lambda x:x[1])
max(a, key=lambda x:len(x[3]))

[11, 22, 33, 'aaa']
[ ]
호텔 = [['이스트소프트 호텔', 5, 100, 155000],
     ['삼스트소프트 호텔', 4, 80, 145000],
     ['사스트소프트 호텔', 3, 70, 135000],] #마지막 콤마를 허락하는 언어는 제한적입니다.

max(호텔, key=lambda x:x[3]) #가장 가격이 높은 것을 뽑아낼 수 있음 
min(호텔, key=lambda x:x[3])
['사스트소프트 호텔', 3, 70, 135000]
리스트의 순회
[ ]
#1차원
a = [1, 2, 3, 4, 5, 6, 7, 8]
# for 변수 in 순회가능한객체
for i in a: 
     print(i)
1
2
3
4
5
6
7
8
[ ]
#2차원
a = [[1, 2, 3],
     [11, 22, 33],
     [13, 20000, 300000]]

for i in a:
    print(i)
    print('---')
print('end')
[1, 2, 3]
---
[11, 22, 33]
---
[13, 20000, 300000]
---
end
[ ]
a = [[1, 2, 3],
     [11, 22, 33],
     [13, 20000, 300000]]

for i in a:
    for j in i:
        print(j)
        print('---')
print('end')
1
---
2
---
3
---
11
---
22
---
33
---
13
---
20000
---
300000
---
end
[ ]
a = [[1, 2, 3,4],
     [11, 22, 33],
     [13, 20000, 300000]]

for i in a:
    for j in i:
        print(i)
        print('---')
print('end')
[1, 2, 3, 4]
---
[1, 2, 3, 4]
---
[1, 2, 3, 4]
---
[1, 2, 3, 4]
---
[11, 22, 33]
---
[11, 22, 33]
---
[11, 22, 33]
---
[13, 20000, 300000]
---
[13, 20000, 300000]
---
[13, 20000, 300000]
---
end
range( )
[ ]
# range(start , stop, step)
#슬라이싱과 같은 규칙
#슬라이싱은 : 로 연결, range는 ,(comma)로 연결.

print(list(range(100))) #python2.x 대에서 python3.x range 사용하고 싶을 때 xrange(10)사용
print(list(range(5, 10)))

print(list(range(0, 101, 2))) #짝수
print(list(range(1, 101, 2))) #홀수

print(sum(list(range(0, 101)))) #리소스 낭비이기 때문에
print(sum(range(0, 101))) #이렇게 해주세요

print(list(range(100, 1, -2)))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[5, 6, 7, 8, 9]
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]
5050
5050
[100, 98, 96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]
list comprehension(리스트 표현식, 지능형 리스트)
간단한 리스트 생성할 때 많이 사용
[ ]
# 1. list(range(1,101))
l=[]
for i in range(1,101):
    l.append(i)
l
[ ]
# l=[]
# for i in range(1,11):
#     l.append(i**i)
# l

l=[i**i for i in range(1,11)]
l

l=[i for i in range(1,11)]
l
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[ ]
for i in range(1, 100):
    if i %3 == 0 or i %5 == 0:
        l.append(i)

[i for i in range(1, 100) if i %3 == 0 or i %5 == 0]
튜플
튜플은 순서 (슬라이싱 인덱스 가능)가 있는 시퀀스형 자료형입니다.
참조값은 변경이 불가능(immutable) 합니다.
다른 자료형을 입력할 수 있으며, 튜플 안에 튜플로 다차원의 튜플을 만드는 것도 가능합니다.
값의 중복을 허락합니다.
[ ]
l = [1, 2, 3]
t = (l, 20, 30) # 불변인 것은 t가 l을 참조하고 있다는 것
l[0] = 1000
t
# 해킹이 용이해지기 때문에 불변 안에는 불변만 넣자
([1000, 2, 3], 20, 30)
[ ]
type(t), dir(t)
(tuple,
 ['__add__',
  '__class__',
  '__class_getitem__',
  '__contains__',
  '__delattr__',
  '__dir__',
  '__doc__',
  '__eq__',
  '__format__',
  '__ge__',
  '__getattribute__',
  '__getitem__',
  '__getnewargs__',
  '__gt__',
  '__hash__',
  '__init__',
  '__init_subclass__',
  '__iter__',
  '__le__',
  '__len__',
  '__lt__',
  '__mul__',
  '__ne__',
  '__new__',
  '__reduce__',
  '__reduce_ex__',
  '__repr__',
  '__rmul__',
  '__setattr__',
  '__sizeof__',
  '__str__',
  '__subclasshook__',
  'count',
  'index'])
[ ]
t=(10,20,30,40,50)
t[:3]
#슬라이싱이 가능하다고 해서 가변이 아니다.
(10, 20, 30)
[ ]
t=(10,20,30,40,50,20)
t.index(20), t.count(20)
(1, 2)
[ ]
t = tuple('leehojun')
t
t=tuple()
t
t = tuple(range(10))
t
t=(1) #튜플로 인지하지 못해요 인지하게 하려면
print(t)
t=(1,)
print(t)
1
(1,)
딕셔너리
딕셔너리는 순서가 없는 자료형입니다.
순서는 보장함
사전형은 Key와 Value 가 하나의 묶음으로 이루어진 자료 체계입니다.
값의 변경이 가능합니다.
다른 자료형을 입력할 수 있습니다.
키의 중복은 허락하지 않고, 값의 중복을 허락합니다.
[ ]
d = {'one' : '하나', 'two' : '둘', 'three' : '셋'}
d
d['two']


[ ]
d['two']='투'
d
{'one': '하나', 'two': '투', 'three': '셋'}
[ ]
d = {} #dict
type(d)

d = {10} #set :문자 혹은 숫자가 들어가면 set
type(d)

d = dict() # dict
type:(d)

d = {'one':1} # dict : key와 value가 있으니깐
type:(d)
[ ]
d = {'one' : '하나', 'two' : '둘', 'three' : '셋'}
d.items()
dict_items([('one', '하나'), ('two', '둘'), ('three', '셋')])
[ ]
dict([('one', '하나'), ('two', '둘'), ('three', '셋')])
{'one': '하나', 'two': '둘', 'three': '셋'}
[ ]
dict([['one', '하나'], ['two', '둘'], ['three', '셋']])
{'one': '하나', 'two': '둘', 'three': '셋'}
[ ]
dict(name='leehojun', age=10)
{'name': 'leehojun', 'age': 10}
[ ]
list(zip('ABC', '123', 'abc'))

dict(zip('ABC', '123')) #형변환 / 맨마지막 abc를 넣어도 무시되는 결과를 볼 수 있음
{'A': '1', 'B': '2', 'C': '3'}
[ ]
#dic와 zip를 사용해서 아래와 같은 형태를 만들어주세요.

#원하는 형태 {}

dict(zip('ABC',[[10,20],[20,30],[30,40]]))

l=[10,20,30,40]
dic(zip('ABC', zip(l,l[1:])))

{'A': [10, 20], 'B': [20, 30], 'C': [30, 40]}
[ ]
'B' in {'A': [10, 20], 'B': [20, 30], 'C': [30, 40]}
True
[ ]
len({'A': [10, 20], 'B': [20, 30], 'C': [30, 40]})
3
[ ]
def switch(day):
    return{
        1:'월요일',
        2:'화요일',
        3:'수요일',
        4:'목요일',
        5:'금요일',
        6:'토요일',
        7:'일요일',
    }[day]
print(switch(7))
일요일
[ ]
def switch(day):
    return{
        1:'월요일',
        2:'화요일',
        3:'수요일',
        4:'목요일',
        5:'금요일',
        6:'토요일',
        7:'일요일',
    }.get(day)

switch(8)
[ ]
def switch(day):
    return{
        1:'월요일',
        2:'화요일',
        3:'수요일',
        4:'목요일',
        5:'금요일',
        6:'토요일',
        7:'일요일',
    }.get(day '요일을 찾지 못했습니다')

switch(8) # 못 찾는 값을 넣었을 때 default 값을 줍니다 '요일을 찾지 못했습니다'
[ ]
# keys
{'A': [10, 20], 'B': [20, 30], 'C': [30, 40]}.keys()
dict_keys(['A', 'B', 'C'])
[ ]
{'A': [10, 20], 'B': [20, 30], 'C': [30, 40]}.values()
dict_values([[10, 20], [20, 30], [30, 40]])
[ ]
{'A': [10, 20], 'B': [20, 30], 'C': [30, 40]}.items()
dict_items([('A', [10, 20]), ('B', [20, 30]), ('C', [30, 40])])
[ ]
dict.fromkeys('hello')
{'h': None, 'e': None, 'l': None, 'o': None}
[ ]

dict.fromkeys('leehojun', 100)

{'l': 100, 'e': 100, 'h': 100, 'o': 100, 'j': 100, 'u': 100, 'n': 100}
[ ]
d = {'one' : '하나', 'two' : '둘', 'three' : '셋'}
d.update({'one' : 1, 'two' : 2})
d
#거의 안쓰는 이유는 이렇게 하지 않고 값을 하나씩 넣는 방식을 많이 쓰기 때문이다.
{'one': 1, 'two': 2, 'three': '셋'}
딕셔너리 순회
[ ]
#key만 순회합니다.

d = {'two' : 2, 'three' : '셋'}
for i in d:
    print(i)
two
three
[ ]
#value만 순회합니다
d = {'two' : 2, 'three' : '셋'}
for i in d:    
    print(d[i])
2
셋
언패킹
*많이 사용되니 기억하기

[ ]
#패킹은 감싼다는 것 : 1,2,3 => [1,2,3]
#언패킹은 반대 : [1,2,3] => 1,2,3
[ ]
a,b,c=10,20,30
a
10
[ ]
for i,j in [[10,20],[30,40],[50,60]]:
    print(i,j)
10 20
30 40
50 60
[ ]
for i,j,k in [[10,20,[1,2]],[30,40,[3,4]],[50,60,[5,6]]]:
    print(i,j,k)
10 20 [1, 2]
30 40 [3, 4]
50 60 [5, 6]
[ ]
for i,j,k in [[10,20,[1,2]],[30,40,[3,4]],[50,60,[5,6]]]:
    print(i,j,k)
[ ]
#swap
a=10
b=15
a,b=b,a
a,b
(15, 10)
[ ]

[ ]
a,b,c=(10,20,30)
a
#소괄호 대괄호 상관없이 위와 같이 똑같아요
[ ]

for i , j in d.items():
     print(i, j)

d.items()
one 하나
two 둘
three 셋
dict_items([('one', '하나'), ('two', '둘'), ('three', '셋')])
max 를 이용한 dict최대 value의 key 값 가져오기
[ ]
d={
    'test1':10,
    'test2':20,
    'test3':31,
    'test4':11,
}

# max(d.values()) ->value만 가져오는 것 
# max(d, key=lambda x:d[x])
max(d, key=d.get) #이걸 많이 사용함 

set (집함)
-집합 자료형은 중복을 허용하지 않으며,

-순서가 없는 자료형입니다. (팝쓰지마)

[ ]
# 카운팅하거나 중복제거, 알고리즘 문제풀이 외에는 잘 풀지 않음
[ ]
n = set([1, 1, 2, 2, 3, 3, 4])
print(n)
{1, 2, 3, 4}
[ ]
s =set('hello world')
print(s)
{'e', 'r', ' ', 'h', 'l', 'w', 'd', 'o'}
[ ]
n = set([1, 1, 2, 2, 3, 3, 4])
n.add(1000)
print(n)
{1, 2, 3, 4, 1000}
[ ]
n = set([1, 1, 2, 2, 3, 3, 4])
n.update ({10,20})
print(n)
{1, 2, 3, 4, 20, 10}
[ ]
n = set([1, 1, 2, 2, 3, 3, 4])
n.remove (1)
print(n)
{2, 3, 4}
*이 pop은 실무에서 사용하지 않습니다. * 값을 랜덤하게 뽑아내기 때문입니다. 높은 확률로 앞에서부터 뽑아내긴 하지만 확률에 기대는 코딩을 하지 않기를 바랍니다. 공식문서에서는 랜덤하게 뽑아낸다고 되어 있습니다.

Remove and return an arbitrary element from the set. Raises KeyError if the set is empty.

[ ]
#교집합 : 별 세개
a={1,2,3}
b={3,4,5}
a&b
a.intersection(b)
{3}
[ ]
#합집함 
a={1,2,3}
b={3,4,5}
a|b
a.union(b)
#a+b = error : set은 더하기가 안돼요.
{1, 2, 3, 4, 5}
[ ]
#차집합
a={1,2,3}
b={3,4,5}
a-b
a.difference(b)
{1, 2}
[ ]
#issubset
s = {1, 2, 3, 4}
ss = {3, 4, 5, 6}
s.issubset({1, 2})
s.issubset({1, 2, 3, 4, 5, 6,7,8}) #s가 {}이 속 친구들의 subset이야?
True
[ ]
# https://school.programmers.co.kr/learn/courses/30/lessons/120903?language=python3
def solution(s1, s2):
    return len(set(s1) & set(s2))
[ ]
# https://school.programmers.co.kr/learn/courses/30/lessons/120888
# my_string result
# "people"  "peol"
# "We are the world"    "We arthwold"

[ ]
def solution(my_string):
    return set(my_string)

solution('people')
{'e', 'l', 'o', 'p'}
[ ]
def solution(my_string):
    return ''.join(set(my_string))

solution('people')

[ ]
def solution(my_string):
    집합=set(my_string)
    result=''
    for i in my_string:
        if i in 집합:
            result += i
            집합.remove(i)
    return result

print(solution('people'))
peol
[ ]
# {'e', 'l', 'o', 'p'}

result=''
for i in 'people':
    if i not in result:
        result += i

# def solution(my_string):
#     return ''.join(set(my_string))

result

!!연습문제
[ ]
# 연습문제 1
student_score = {
        '홍의': 97,
        '원희': 60,
        '동해': 77,
        '변수': 79,
        '창현': 89,
}

# - 학생들의 **총점**을 구하는 코드를 작성하세요.
# - 학생들의 **평균 점수**를 구하는 코드를 작성하세요.
# - 점수가 가장 **높은** 학생의 이름과 그 점수를 구하는 코드를 작성하세요.
# - 점수가 가장 **낮은** 학생의 이름과 그 점수를 구하는 코드를 작성하세요.
[ ]
# - 학생들의 **총점**을 구하는 코드를 작성하세요.
student_score = {
        '홍의': 97,
        '원희': 60,
        '동해': 77,
        '변수': 79,
        '창현': 89,
}
print(f'학생들의 총점은 {sum(student_score.values())}입니다.')
학생들의 총점은 402입니다.
[ ]
# - 학생들의 **평균 점수**를 구하는 코드를 작성하세요.
average_score = sum(student_score.values())/len(student_score)
print(f'학생들의 평균 점수는{average_score}입니다.')
학생들의 평균 점수는80.4입니다.
[ ]
# - 점수가 가장 **높은** 학생의 이름과 그 점수를 구하는 코드를 작성하세요.
highest_student=max(student_score, key=student_score.get)
highest_score=student_score[highest_student]
print(highest_student,highest_score)
홍의 97
[ ]

[ ]
# - 점수가 가장 **낮은** 학생의 이름과 그 점수를 구하는 코드를 작성하세요.
lowest_name=min(student_score, key=student_score.get)
lowest_score=student_score[lowest_name]
print(lowest_name, lowest_score)
원희 60
[ ]
# 연습문제 2
# 학생들은 점심 메뉴를 고를 때, 한 명이라도 싫어하는 메뉴라면 고르지 않기로 했습니다. 
# 최종 후보 메뉴들의 리스트를 구하는 코드를 작성해주세요.

like = ['볶음밥', '라면', '국수', '파스타', '치킨', '짜장면', '국밥']
dislike = ['국밥', '짬뽕', '찜닭', '파스타', '국수', '카레', '덮밥']
[ ]
like = ['볶음밥', '라면', '국수', '파스타', '치킨', '짜장면', '국밥']
dislike = ['국밥', '짬뽕', '찜닭', '파스타', '국수', '카레', '덮밥']

set(like)-set(dislike)
# print(like.intersection(dislike))
{'라면', '볶음밥', '짜장면', '치킨'}
(질의응답) max(sutdent_score, key=student_score.get)
[ ]
def 함수(x):
    print(x, ll[x])
    return ll[x]
l = [2, 4, 5, 3, 6, 0, 7, 1]
ll = [10, 20, 30, 40, 50, 60, 70, 80]

max(l, key=함수)

#왜 ll에서 값을 찾는거에요?
2 30
4 50
5 60
3 40
6 70
0 10
7 80
1 20
7
[ ]
def 함수(x):
    print(x, len(ll[x]))
    return len(ll[x])

l = [2, 4, 5, 3, 6, 0, 7, 1]
ll = ['hello', 'a', 'bb', 'ccc', 'a', 'bbbb', 'hello world', 'cc']

max(l, key=함수)
2 2
4 1
5 4
3 3
6 11
0 5
7 2
1 1
6
[ ]
def 함수(x):
    return d.get(x)

d = {
      'test1': 10,
      'test2': 20,
      'test3': 31,
      'test4': 11,
}

# max(d, key=lambda x: d[x])
# max(d, key=d.get)
max(d, key=함수)



[ ]
def 함수(x):
    return len(x)
l=['a','bb','ccc','dd']
# max(l, key=함수)
max(l, key=len)

#return값이 숫자값이 되면 돼요.
#return에 초점을 맞춰주세요.

[ ]
def 함수(x):
    return d.get(x)

수학 = {
      '학생1': 10,
      '학생2': 20,
      '학생3': 31,
      '학생4': 11,
}

과학 = {
      '학생1': 11,
      '학생2': 17,
      '학생3': 13,
      '학생4': 11,
      '학생5': 25,
      '학생6': 100,
}

# max(수학, key=함수)
max(수학, key=수학.get)
max(과학, key=과학.get)
max(수학, key=과학.get) #수학시험을 본 사람 중에 과학을 가장 잘 본 사람을 보고싶을 때 즉, 자료가 다를 때 추출하는 방법


(질의응답) 함수의 아규먼트 순서
[ ]
def f(a, b, c):
    print(a, b, c)

# f() # error
# f(100, 10) # error
f(a=100, b=200, c=300)
f(c=300, a=100, b=200) #실무에서 파라미터, 아규먼트가 매우 많을 때 사용.
#그러나 실무에서 순서를 바꿔서 넣지 않습니다. 순서를 지켜줘요.
100 200 300
100 200 300
[ ]
def f(a=10, b=20, c=30):
    print(a, b, c)

f()
f(100, 10)
f(a=100, b=200, c=300)
f(c=300, a=100, b=200)
10 20 30
100 10 30
100 200 300
100 200 300
[ ]
def f(a=10, b=20, c): # c만 default value를 안주게 되면 error, 순서대로 안주어야 합니다. 안 줄거라면 a부터 안줘야해요.
    print(a, b, c)

# f() # error
# f(100, 10) # error
# f(a=100, b=200, c=300) # error
# f(c=300, a=100, b=200) # error
# f(c=300) #error =>순서대로 default value 주지 않지 않아서
(질의응답) zip, map 등 한 번 순회가 되면 순회가 안되는 이유
[ ]
a = [1, 2, 3]
b = ['a', 'b', 'c']

z = zip(a, b)
print(list(z)) # [(1, 'a'), (2, 'b'), (3, 'c')]

# zip 객체는 한 번 사용되었으므로 빈 리스트가 반환됩니다.
print(list(z)) # []

[ ]
li = [1, 2, 3]
st = ['a', 'b', 'c']
z = zip(li, st)

for i in z:
    print(i)

for i in z:
    print(i)
[ ]
li = [1, 2, 3]
st = ['a', 'b', 'c']
i = iter(zip(li, st))
next(i)

#iter와 next는 다음 스텝에서 배워요~ 하지만 이걸 쓰면 하나씩 꺼내쓸 수 있는 것
(1, 'a')
[ ]
next(i)
(2, 'b')
[ ]
next(i)
(3, 'c')
[ ]
next(i)

#<error> StopIteration:  
[ ]
#map, reversed,filter 모두 2번 순회가 안돼요.

li = [1, 2, 3]
z = map(lambda x:x**2, li)

for i in z:
    print(i)

for i in z:
    print(i)

li = [1, 2, 3]
z = reversed(li)

for i in z:
    print(i)

for i in z:
    print(i)

li = [1, 2, 3]
z = filter(lambda x:x>1, li)

for i in z:
    print(i)

for i in z:
    print(i)
[ ]
#하지만 sorted는 굉장히 많이 쓰기 때문에 계속해서 순회 가능
li = [1, 2, 3]
z = sorted(li)

for i in z:
    print(i)

for i in z:
    print(i)
1
2
3
1
2
3
조건문
*if, elif, else, continue, break

[ ]
x = 2
if x > 1  and x < 10:
    print('hello')
hello
[ ]
if True:
    print('hello')
#True를 직접적으로 If 뒤에 쓸 수 있음
hello
[ ]
def f():
    return False
if f():
    print('hello')
    print('one')
print('two')
two
[ ]
if '': #[] {} '' 는 모두 False 취급합니다
    print('hello')
    print('one')
print('two')
two
[ ]
if ' ': #문자열 공백은 True
    print('hello')
    print('one')
print('two')
hello
one
two
[ ]
if [            ]: #False
    print('hello')
    print('one')
print('two')
[ ]
if [,]: #error
    print('hello')
    print('one')
print('two')
[ ]
if [10,
    20,
    30, # 마지막 콤마는 허락합니다! 소괄호, 중괄호, 대괄호에 공백은 병합입니다.
    ]:
    print('hello')
    print('one')
print('two')
[ ]
if None:
    print('false')
print('bye')
bye
[ ]

[ ]
#__eq__
class int(int):
    def __eq__(self,next):
        return True

if int('11')==int('10'):
    print('hello')
hello
[ ]
if 10 > 11:
    print('one')
    print('two')
print('three')
else: #다른 구문과 이어지지 않아 error 
    print('four')
[ ]
if 10 > 11:
    print('one')
    print('two')
else: 
    print('three')
three
[ ]
#else가 필요없는 경우
def f():
    if 10>11:
        return 'one'
    return 'two'

print(f())
two
[ ]
# 여러개의 if문을 단축하는 방법 => 
# 가독성이 좋아지는 것을 선택하세요!
# and 구문으로 If를 합칠 수 있습니다.
x=10
if x>5:
    if type(x)==int:
        print('one')

# 합쳐보자
if x>5 and type(x) == int:
    print('one')
[ ]
# x=10
# if x>5:
#     if type(x)==int:
#         if x%2==0:
#         print('one')

# 합쳐보자
if x>5 and type(x) == int and x%2==0:
    print('one')
[ ]
if True:
    print('hello')
else:
    print('hello')
else: # error
    print('hello')
else:
    print('hello')
[ ]
score = 81
money = 0

if score >= 90: #만약 조건이 참이라면
    print('mom : i\'m so happy!')
    money += 1000000
elif score >= 80:
    print('mom : i\'m happy!')
    money += 100000
elif score >= 70 and score < 80:
    print('mom : i\'m so...!')
    money += 10000
elif score >= 60 and score < 70:
    print('mom : i\'m so...!')
    money += 1000
else:
    print('mom : i\'m...!')
print(money)

#elif, else 구문은 if와 한 덩어리!! 트리오.
#if, elif, else 구문을 함께 썼다면 하나만 실행이 되고 나머지는 실행이 되지 않습니다. 
mom : i'm happy!
100000
if 문 심화
[ ]
# 가능하나 권장하지 않음 가독성 떨어지기 때문
if 10>5: print('hello') #1줄에 사용하는 것 가능
# 다만 3항 연산자는 가독성 해치지 않는 선에서 많이 사용함
hello
[ ]
if 1>5: print('hello')
elif 5>1: print('world')
world
[ ]
if 1>5: print('hello')
elif 1>5: print('world')
else: print('hello world')
hello world
[ ]
# 다만 3항 연산자는 가독성 해치지 않는 선에서 많이 사용함
print('one')if 5>1 else print('two')
one
[ ]
(print('one')if 5>1 else print('two'))
#()쓰면서 3항 연산자임을 알릴 수 있음
one
[ ]
#할당, return에서 많이 사용
#할당이나 return을 할 때 어떤 조건을 달고 싶을 때
#그런데 일반 if 문과 else문 거창하다고 생각이 되었을 때
y='100'
x= 'one' if y>80 else None

[ ]
def f(y):
    if y > 80:
        x='one'
    else:
        x=None
    return x

print(f(100))
print(f(30))

one
None
[ ]
#더 간단하게 해보자
def f(y):
    if y > 80:
        return 'one'
    return None

print(f(100))
print(f(30))
[ ]
#3항 연산자로 바꿔보자
def f(y):
    return 'one' if y > 80 else None

print(f(100))
one
[ ]
def custom_sum(x):
    return sum(x)

custom_sum([1,2,3,4,5,6]) #21
custom_sum([1,2,3,4,'5',6]) #float('inf')
[ ]
def custom_sum(x):
    return sum(x) if len(list(filter(lambda x:type(x)==int, x)))==len(x) else float('inf')

custom_sum([1,2,3,4,5,6]) #21
custom_sum([1,2,3,4,'5',6]) #float('inf')
inf
[ ]
#강사님
def custom_sum(x):
    return sum(x) if len(list(filter(lambda x:type(x)==int, x))) == len(x) else float('inf')

custom_sum([1, 2, 3, 4, 5, 6]) # 21
custom_sum([1, 2, 3, 4, '5', 6]) # float('inf')
inf
[ ]
def custom_sum(li):
    return sum(li) if len(list(filter(lambda x:type(x)==int, li))) == len(li) else float('inf')

custom_sum([1, 2, 3, 4, 5, 6]) # 21
custom_sum([1, 2, 3, 4, '5', 6]) # float('inf')
[ ]
l=[1,2,3,'4','5']
list(filter(lambda x:type(x)==int, l))
len(list(filter(lambda x:type(x)==int, l)))
len(l)
5
[ ]
l = [1, 2, 3, '4', '5']
list(filter(lambda x : type(x) == int, l))
# len(list(filter(lambda x : type(x) == int, l)))
# len(l)
[1, 2, 3]
[ ]
# 문제: 다음 If문을 3항 연사자로 표현
# if x%2==0:
#     홀짝여부='짝수'
# else:
#     홀짝여부='홀수'

# 답 
x=10
'짝수' if x%2==0 else '홀수'

[ ]
#3항 연산자의 중첩 : 빈도가 낮아요
# '조건1이 True일 때' if '조건1' else '조건1일 False이고 조건2가 True일 때' if '조건2' else '조건1, 조건2가 False일 때'
[ ]
# '조건1이 True일 때' 
# if '조건1' 
# else '조건1일 False이고 조건2가 True일 때' 
#     if '조건2' 
#     else '조건1, 조건2가 False일 때'
[ ]
x=17
if x%2==0:
    배수='2x' #2의 배수
elif x%3==0:
    배수='3x' #3의 배수
else:
    배수='?' #2의 배수도 3의 배수도 아니다
배수
[ ]
x=17
배수 = '2x' if x%2==0 else '3x' if x%3==0 else '?'
배수

반복문
[ ]
# for 변수 in 순회가능한객체:
#     code
# 순회가능한객체란? next가 있는 것 
# 순회가능한객체!=시퀀스형자료 (순서가 없어도 순회가 가능하기 때문에)
[ ]
for i in 'hello world':
    print(i)
h
e
l
l
o
 
w
o
r
l
d
[ ]
for i in 10 #error
    print(i)

for i in 10.1 #error
    print(i)    
[ ]
for i in [1,2,3]
    print(i)

for i in (1,2,3)
    print(i)

for i in {1,2,3}
    print(i)
#순서 보장은 안되지만 순회 가능해요


[ ]
# 변수에는 range, enumerate, zip,map,sorted, reveresd.. 
for i in range(10):
    print(i)
0
1
2
3
4
5
6
7
8
9
[ ]
언어순위=['python','javascript','java','ruby']
for i in enumerate(언어순위, 1):
    print(i)
(1, 'python')
(2, 'javascript')
(3, 'java')
(4, 'ruby')
[ ]
언어순위=['python','javascript','java','ruby']
for i, j in enumerate(언어순위, 101):
    print(i, j)
101 python
102 javascript
103 java
104 ruby
